
pro1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00002db6  00002e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009c  0080009c  00002e86  2**0
                  ALLOC
  3 .stab         0000270c  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e7  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000667b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000692b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000945f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a20c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
      8a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 16 	jmp	0x2cdc	; 0x2cdc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
#include "BitMath.h"
#include "ADC.h"

u16 value;
void ADC_Init (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA_Reg,7);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	84 60       	ori	r24, 0x04	; 4
     b68:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,1);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT(ADMUX_Reg,7);
     b86:	a7 e2       	ldi	r26, 0x27	; 39
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e7 e2       	ldi	r30, 0x27	; 39
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 77       	andi	r24, 0x7F	; 127
     b92:	8c 93       	st	X, r24
	SET_BIT(ADMUX_Reg,6);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 64       	ori	r24, 0x40	; 64
     ba0:	8c 93       	st	X, r24

	// ADC Data Rgith Adjustment
	CLR_BIT(ADMUX_Reg,5);
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_Read>:


u16 ADC_Read (u8 channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	// ADC Channel Selection
	channel &= 0x07;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	87 70       	andi	r24, 0x07	; 7
     bc6:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_Reg &= 0xE0;
     bc8:	a7 e2       	ldi	r26, 0x27	; 39
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e7 e2       	ldi	r30, 0x27	; 39
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 7e       	andi	r24, 0xE0	; 224
     bd4:	8c 93       	st	X, r24
	ADMUX_Reg |= channel;
     bd6:	a7 e2       	ldi	r26, 0x27	; 39
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e7 e2       	ldi	r30, 0x27	; 39
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	90 81       	ld	r25, Z
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	89 2b       	or	r24, r25
     be4:	8c 93       	st	X, r24

	// Start Single Convertion
	SET_BIT(ADCSRA_Reg,6);
     be6:	a6 e2       	ldi	r26, 0x26	; 38
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e6 e2       	ldi	r30, 0x26	; 38
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	8c 93       	st	X, r24

	//wait for the conversion
	while(!(ADCSRA_Reg & (1<<4)));
     bf4:	e6 e2       	ldi	r30, 0x26	; 38
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	80 71       	andi	r24, 0x10	; 16
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	b9 f3       	breq	.-18     	; 0xbf4 <ADC_Read+0x3e>

	//ADC Flag Clear
	SET_BIT(ADCSRA_Reg,4);
     c06:	a6 e2       	ldi	r26, 0x26	; 38
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 61       	ori	r24, 0x10	; 16
     c12:	8c 93       	st	X, r24
	value=((u16)( ((u32)((u32)5000*ADC)) /((u32)1023) ));
     c14:	e4 e2       	ldi	r30, 0x24	; 36
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	cc 01       	movw	r24, r24
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	28 e8       	ldi	r18, 0x88	; 136
     c24:	33 e1       	ldi	r19, 0x13	; 19
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	bc 01       	movw	r22, r24
     c2c:	cd 01       	movw	r24, r26
     c2e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <__mulsi3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	2f ef       	ldi	r18, 0xFF	; 255
     c38:	33 e0       	ldi	r19, 0x03	; 3
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
     c46:	da 01       	movw	r26, r20
     c48:	c9 01       	movw	r24, r18
     c4a:	90 93 a4 00 	sts	0x00A4, r25
     c4e:	80 93 a3 00 	sts	0x00A3, r24

	return value;
     c52:	80 91 a3 00 	lds	r24, 0x00A3
     c56:	90 91 a4 00 	lds	r25, 0x00A4
}
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <M_DIO_void_SetPinDir>:
 *************************************************************************************/
/***
 * Pin Functions
 ***/

void M_DIO_void_SetPinDir (u8 copy_u8_PortID, u8 copy_u8_PinID, u8 copy_u8_DirID) {
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <M_DIO_void_SetPinDir+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <M_DIO_void_SetPinDir+0x8>
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	6a 83       	std	Y+2, r22	; 0x02
     c74:	4b 83       	std	Y+3, r20	; 0x03
	switch (copy_u8_PortID)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	3d 83       	std	Y+5, r19	; 0x05
     c7e:	2c 83       	std	Y+4, r18	; 0x04
     c80:	6c 81       	ldd	r22, Y+4	; 0x04
     c82:	7d 81       	ldd	r23, Y+5	; 0x05
     c84:	61 30       	cpi	r22, 0x01	; 1
     c86:	71 05       	cpc	r23, r1
     c88:	d1 f1       	breq	.+116    	; 0xcfe <M_DIO_void_SetPinDir+0x9c>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	82 30       	cpi	r24, 0x02	; 2
     c90:	91 05       	cpc	r25, r1
     c92:	34 f4       	brge	.+12     	; 0xca0 <M_DIO_void_SetPinDir+0x3e>
     c94:	2c 81       	ldd	r18, Y+4	; 0x04
     c96:	3d 81       	ldd	r19, Y+5	; 0x05
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	71 f0       	breq	.+28     	; 0xcba <M_DIO_void_SetPinDir+0x58>
     c9e:	94 c0       	rjmp	.+296    	; 0xdc8 <M_DIO_void_SetPinDir+0x166>
     ca0:	6c 81       	ldd	r22, Y+4	; 0x04
     ca2:	7d 81       	ldd	r23, Y+5	; 0x05
     ca4:	62 30       	cpi	r22, 0x02	; 2
     ca6:	71 05       	cpc	r23, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <M_DIO_void_SetPinDir+0x4a>
     caa:	4b c0       	rjmp	.+150    	; 0xd42 <M_DIO_void_SetPinDir+0xe0>
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <M_DIO_void_SetPinDir+0x56>
     cb6:	67 c0       	rjmp	.+206    	; 0xd86 <M_DIO_void_SetPinDir+0x124>
     cb8:	87 c0       	rjmp	.+270    	; 0xdc8 <M_DIO_void_SetPinDir+0x166>
	{
		case PORTA_ID: WRT_BIT(DDRA, copy_u8_PinID, copy_u8_DirID); break;
     cba:	aa e3       	ldi	r26, 0x3A	; 58
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e3       	ldi	r30, 0x3A	; 58
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <M_DIO_void_SetPinDir+0x74>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	2a 95       	dec	r18
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <M_DIO_void_SetPinDir+0x70>
     cda:	80 95       	com	r24
     cdc:	48 23       	and	r20, r24
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	88 2f       	mov	r24, r24
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	b9 01       	movw	r22, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <M_DIO_void_SetPinDir+0x90>
     cee:	66 0f       	add	r22, r22
     cf0:	77 1f       	adc	r23, r23
     cf2:	8a 95       	dec	r24
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <M_DIO_void_SetPinDir+0x8c>
     cf6:	cb 01       	movw	r24, r22
     cf8:	84 2b       	or	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	65 c0       	rjmp	.+202    	; 0xdc8 <M_DIO_void_SetPinDir+0x166>
		case PORTB_ID: WRT_BIT(DDRB, copy_u8_PinID, copy_u8_DirID); break;
     cfe:	a7 e3       	ldi	r26, 0x37	; 55
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e3       	ldi	r30, 0x37	; 55
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <M_DIO_void_SetPinDir+0xb8>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	2a 95       	dec	r18
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <M_DIO_void_SetPinDir+0xb4>
     d1e:	80 95       	com	r24
     d20:	48 23       	and	r20, r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	b9 01       	movw	r22, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <M_DIO_void_SetPinDir+0xd4>
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	8a 95       	dec	r24
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <M_DIO_void_SetPinDir+0xd0>
     d3a:	cb 01       	movw	r24, r22
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	43 c0       	rjmp	.+134    	; 0xdc8 <M_DIO_void_SetPinDir+0x166>
		case PORTC_ID: WRT_BIT(DDRC, copy_u8_PinID, copy_u8_DirID); break;
     d42:	a4 e3       	ldi	r26, 0x34	; 52
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e4 e3       	ldi	r30, 0x34	; 52
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <M_DIO_void_SetPinDir+0xfc>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	2a 95       	dec	r18
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <M_DIO_void_SetPinDir+0xf8>
     d62:	80 95       	com	r24
     d64:	48 23       	and	r20, r24
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	b9 01       	movw	r22, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <M_DIO_void_SetPinDir+0x118>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	8a 95       	dec	r24
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <M_DIO_void_SetPinDir+0x114>
     d7e:	cb 01       	movw	r24, r22
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	21 c0       	rjmp	.+66     	; 0xdc8 <M_DIO_void_SetPinDir+0x166>
		case PORTD_ID: WRT_BIT(DDRD, copy_u8_PinID, copy_u8_DirID); break;
     d86:	a1 e3       	ldi	r26, 0x31	; 49
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <M_DIO_void_SetPinDir+0x140>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	2a 95       	dec	r18
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <M_DIO_void_SetPinDir+0x13c>
     da6:	80 95       	com	r24
     da8:	48 23       	and	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	b9 01       	movw	r22, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <M_DIO_void_SetPinDir+0x15c>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	8a 95       	dec	r24
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <M_DIO_void_SetPinDir+0x158>
     dc2:	cb 01       	movw	r24, r22
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
		default:       /* Wrong Port ID */                          break;
	}
}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <M_DIO_void_SetPinVal>:

void M_DIO_void_SetPinVal (u8 copy_u8_PortID, u8 copy_u8_PinID, u8 copy_u8_PinVal) {
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <M_DIO_void_SetPinVal+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <M_DIO_void_SetPinVal+0x8>
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	6a 83       	std	Y+2, r22	; 0x02
     dea:	4b 83       	std	Y+3, r20	; 0x03
	switch (copy_u8_PortID)
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	3d 83       	std	Y+5, r19	; 0x05
     df4:	2c 83       	std	Y+4, r18	; 0x04
     df6:	6c 81       	ldd	r22, Y+4	; 0x04
     df8:	7d 81       	ldd	r23, Y+5	; 0x05
     dfa:	61 30       	cpi	r22, 0x01	; 1
     dfc:	71 05       	cpc	r23, r1
     dfe:	d1 f1       	breq	.+116    	; 0xe74 <M_DIO_void_SetPinVal+0x9c>
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	91 05       	cpc	r25, r1
     e08:	34 f4       	brge	.+12     	; 0xe16 <M_DIO_void_SetPinVal+0x3e>
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	71 f0       	breq	.+28     	; 0xe30 <M_DIO_void_SetPinVal+0x58>
     e14:	94 c0       	rjmp	.+296    	; 0xf3e <M_DIO_void_SetPinVal+0x166>
     e16:	6c 81       	ldd	r22, Y+4	; 0x04
     e18:	7d 81       	ldd	r23, Y+5	; 0x05
     e1a:	62 30       	cpi	r22, 0x02	; 2
     e1c:	71 05       	cpc	r23, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <M_DIO_void_SetPinVal+0x4a>
     e20:	4b c0       	rjmp	.+150    	; 0xeb8 <M_DIO_void_SetPinVal+0xe0>
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	91 05       	cpc	r25, r1
     e2a:	09 f4       	brne	.+2      	; 0xe2e <M_DIO_void_SetPinVal+0x56>
     e2c:	67 c0       	rjmp	.+206    	; 0xefc <M_DIO_void_SetPinVal+0x124>
     e2e:	87 c0       	rjmp	.+270    	; 0xf3e <M_DIO_void_SetPinVal+0x166>
	{
		case PORTA_ID: WRT_BIT(PORTA, copy_u8_PinID, copy_u8_PinVal); break;
     e30:	ab e3       	ldi	r26, 0x3B	; 59
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e3       	ldi	r30, 0x3B	; 59
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <M_DIO_void_SetPinVal+0x74>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	2a 95       	dec	r18
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <M_DIO_void_SetPinVal+0x70>
     e50:	80 95       	com	r24
     e52:	48 23       	and	r20, r24
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	b9 01       	movw	r22, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <M_DIO_void_SetPinVal+0x90>
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	8a 95       	dec	r24
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <M_DIO_void_SetPinVal+0x8c>
     e6c:	cb 01       	movw	r24, r22
     e6e:	84 2b       	or	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	65 c0       	rjmp	.+202    	; 0xf3e <M_DIO_void_SetPinVal+0x166>
		case PORTB_ID: WRT_BIT(PORTB, copy_u8_PinID, copy_u8_PinVal); break;
     e74:	a8 e3       	ldi	r26, 0x38	; 56
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e3       	ldi	r30, 0x38	; 56
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <M_DIO_void_SetPinVal+0xb8>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	2a 95       	dec	r18
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <M_DIO_void_SetPinVal+0xb4>
     e94:	80 95       	com	r24
     e96:	48 23       	and	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	b9 01       	movw	r22, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <M_DIO_void_SetPinVal+0xd4>
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	8a 95       	dec	r24
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <M_DIO_void_SetPinVal+0xd0>
     eb0:	cb 01       	movw	r24, r22
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	43 c0       	rjmp	.+134    	; 0xf3e <M_DIO_void_SetPinVal+0x166>
		case PORTC_ID: WRT_BIT(PORTC, copy_u8_PinID, copy_u8_PinVal); break;
     eb8:	a5 e3       	ldi	r26, 0x35	; 53
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e5 e3       	ldi	r30, 0x35	; 53
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <M_DIO_void_SetPinVal+0xfc>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	2a 95       	dec	r18
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <M_DIO_void_SetPinVal+0xf8>
     ed8:	80 95       	com	r24
     eda:	48 23       	and	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	b9 01       	movw	r22, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <M_DIO_void_SetPinVal+0x118>
     eec:	66 0f       	add	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	8a 95       	dec	r24
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <M_DIO_void_SetPinVal+0x114>
     ef4:	cb 01       	movw	r24, r22
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	21 c0       	rjmp	.+66     	; 0xf3e <M_DIO_void_SetPinVal+0x166>
		case PORTD_ID: WRT_BIT(PORTD, copy_u8_PinID, copy_u8_PinVal); break;
     efc:	a2 e3       	ldi	r26, 0x32	; 50
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e2 e3       	ldi	r30, 0x32	; 50
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <M_DIO_void_SetPinVal+0x140>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	2a 95       	dec	r18
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <M_DIO_void_SetPinVal+0x13c>
     f1c:	80 95       	com	r24
     f1e:	48 23       	and	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	b9 01       	movw	r22, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <M_DIO_void_SetPinVal+0x15c>
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	8a 95       	dec	r24
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <M_DIO_void_SetPinVal+0x158>
     f38:	cb 01       	movw	r24, r22
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
		default:       /* Wrong Port ID */                            break;
	}
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <M_DIO_void_TogPinVal>:

void M_DIO_void_TogPinVal (u8 copy_u8_PortID, u8 copy_u8_PinID) {
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <M_DIO_void_TogPinVal+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <M_DIO_void_TogPinVal+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3c 83       	std	Y+4, r19	; 0x04
     f66:	2b 83       	std	Y+3, r18	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	49 f1       	breq	.+82     	; 0xfc4 <M_DIO_void_TogPinVal+0x76>
     f72:	2b 81       	ldd	r18, Y+3	; 0x03
     f74:	3c 81       	ldd	r19, Y+4	; 0x04
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <M_DIO_void_TogPinVal+0x38>
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <M_DIO_void_TogPinVal+0x4e>
     f84:	5a c0       	rjmp	.+180    	; 0x103a <M_DIO_void_TogPinVal+0xec>
     f86:	2b 81       	ldd	r18, Y+3	; 0x03
     f88:	3c 81       	ldd	r19, Y+4	; 0x04
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	71 f1       	breq	.+92     	; 0xfec <M_DIO_void_TogPinVal+0x9e>
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	e9 f1       	breq	.+122    	; 0x1014 <M_DIO_void_TogPinVal+0xc6>
     f9a:	4f c0       	rjmp	.+158    	; 0x103a <M_DIO_void_TogPinVal+0xec>
		case PORTA_ID: TOG_BIT(PORTA, copy_u8_PinID); break;
     f9c:	ab e3       	ldi	r26, 0x3B	; 59
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	eb e3       	ldi	r30, 0x3B	; 59
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <M_DIO_void_TogPinVal+0x6c>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <M_DIO_void_TogPinVal+0x68>
     fbe:	84 27       	eor	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	3b c0       	rjmp	.+118    	; 0x103a <M_DIO_void_TogPinVal+0xec>
		case PORTB_ID: TOG_BIT(PORTB, copy_u8_PinID); break;
     fc4:	a8 e3       	ldi	r26, 0x38	; 56
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e3       	ldi	r30, 0x38	; 56
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <M_DIO_void_TogPinVal+0x94>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <M_DIO_void_TogPinVal+0x90>
     fe6:	84 27       	eor	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	27 c0       	rjmp	.+78     	; 0x103a <M_DIO_void_TogPinVal+0xec>
		case PORTC_ID: TOG_BIT(PORTC, copy_u8_PinID); break;
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <M_DIO_void_TogPinVal+0xbc>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <M_DIO_void_TogPinVal+0xb8>
    100e:	84 27       	eor	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	13 c0       	rjmp	.+38     	; 0x103a <M_DIO_void_TogPinVal+0xec>
		case PORTD_ID: TOG_BIT(PORTD, copy_u8_PinID); break;
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <M_DIO_void_TogPinVal+0xe4>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <M_DIO_void_TogPinVal+0xe0>
    1036:	84 27       	eor	r24, r20
    1038:	8c 93       	st	X, r24
		default:       /* Wrong Port ID */            break;
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <M_DIO_void_GetPinVal>:

void M_DIO_void_GetPinVal (u8 copy_u8_PortID, u8 copy_u8_PinID, u8 *copy_Pu8_PinVal){
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	27 97       	sbiw	r28, 0x07	; 7
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	8a 83       	std	Y+2, r24	; 0x02
    105e:	6b 83       	std	Y+3, r22	; 0x03
    1060:	5d 83       	std	Y+5, r21	; 0x05
    1062:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8_PinVal = 0;
    1064:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_u8_PortID){
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3f 83       	std	Y+7, r19	; 0x07
    106e:	2e 83       	std	Y+6, r18	; 0x06
    1070:	4e 81       	ldd	r20, Y+6	; 0x06
    1072:	5f 81       	ldd	r21, Y+7	; 0x07
    1074:	41 30       	cpi	r20, 0x01	; 1
    1076:	51 05       	cpc	r21, r1
    1078:	41 f1       	breq	.+80     	; 0x10ca <M_DIO_void_GetPinVal+0x82>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	91 05       	cpc	r25, r1
    1082:	34 f4       	brge	.+12     	; 0x1090 <M_DIO_void_GetPinVal+0x48>
    1084:	2e 81       	ldd	r18, Y+6	; 0x06
    1086:	3f 81       	ldd	r19, Y+7	; 0x07
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	61 f0       	breq	.+24     	; 0x10a6 <M_DIO_void_GetPinVal+0x5e>
    108e:	52 c0       	rjmp	.+164    	; 0x1134 <M_DIO_void_GetPinVal+0xec>
    1090:	4e 81       	ldd	r20, Y+6	; 0x06
    1092:	5f 81       	ldd	r21, Y+7	; 0x07
    1094:	42 30       	cpi	r20, 0x02	; 2
    1096:	51 05       	cpc	r21, r1
    1098:	51 f1       	breq	.+84     	; 0x10ee <M_DIO_void_GetPinVal+0xa6>
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	b9 f1       	breq	.+110    	; 0x1112 <M_DIO_void_GetPinVal+0xca>
    10a4:	47 c0       	rjmp	.+142    	; 0x1134 <M_DIO_void_GetPinVal+0xec>
		case PORTA_ID: local_u8_PinVal = GET_BIT(PINA, copy_u8_PinID); break;
    10a6:	e9 e3       	ldi	r30, 0x39	; 57
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <M_DIO_void_GetPinVal+0x76>
    10ba:	55 95       	asr	r21
    10bc:	47 95       	ror	r20
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <M_DIO_void_GetPinVal+0x72>
    10c2:	ca 01       	movw	r24, r20
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	35 c0       	rjmp	.+106    	; 0x1134 <M_DIO_void_GetPinVal+0xec>
		case PORTB_ID: local_u8_PinVal = GET_BIT(PINB, copy_u8_PinID); break;
    10ca:	e6 e3       	ldi	r30, 0x36	; 54
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <M_DIO_void_GetPinVal+0x9a>
    10de:	55 95       	asr	r21
    10e0:	47 95       	ror	r20
    10e2:	8a 95       	dec	r24
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <M_DIO_void_GetPinVal+0x96>
    10e6:	ca 01       	movw	r24, r20
    10e8:	81 70       	andi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	23 c0       	rjmp	.+70     	; 0x1134 <M_DIO_void_GetPinVal+0xec>
		case PORTC_ID: local_u8_PinVal = GET_BIT(PINC, copy_u8_PinID); break;
    10ee:	e3 e3       	ldi	r30, 0x33	; 51
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <M_DIO_void_GetPinVal+0xbe>
    1102:	55 95       	asr	r21
    1104:	47 95       	ror	r20
    1106:	8a 95       	dec	r24
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <M_DIO_void_GetPinVal+0xba>
    110a:	ca 01       	movw	r24, r20
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <M_DIO_void_GetPinVal+0xec>
		case PORTD_ID: local_u8_PinVal = GET_BIT(PIND, copy_u8_PinID); break;
    1112:	e0 e3       	ldi	r30, 0x30	; 48
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a9 01       	movw	r20, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <M_DIO_void_GetPinVal+0xe2>
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <M_DIO_void_GetPinVal+0xde>
    112e:	ca 01       	movw	r24, r20
    1130:	81 70       	andi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
		default:       /* Wrong Port ID */                             break;
	}
	*copy_Pu8_PinVal = local_u8_PinVal;
    1134:	ec 81       	ldd	r30, Y+4	; 0x04
    1136:	fd 81       	ldd	r31, Y+5	; 0x05
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	80 83       	st	Z, r24
}
    113c:	27 96       	adiw	r28, 0x07	; 7
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <M_DIO_void_SetPortDir>:

/***
 * Port Functions
 ***/
void M_DIO_void_SetPortDir (u8 copy_u8_PortID, u8 copy_u8_PortDir) {
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <M_DIO_void_SetPortDir+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <M_DIO_void_SetPortDir+0x8>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3c 83       	std	Y+4, r19	; 0x04
    1166:	2b 83       	std	Y+3, r18	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <M_DIO_void_SetPortDir+0x58>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <M_DIO_void_SetPortDir+0x38>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <M_DIO_void_SetPortDir+0x4e>
    1184:	1e c0       	rjmp	.+60     	; 0x11c2 <M_DIO_void_SetPortDir+0x74>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <M_DIO_void_SetPortDir+0x62>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <M_DIO_void_SetPortDir+0x6c>
    119a:	13 c0       	rjmp	.+38     	; 0x11c2 <M_DIO_void_SetPortDir+0x74>
		case PORTA_ID: DDRA = copy_u8_PortDir; break;
    119c:	ea e3       	ldi	r30, 0x3A	; 58
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	80 83       	st	Z, r24
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <M_DIO_void_SetPortDir+0x74>
		case PORTB_ID: DDRB = copy_u8_PortDir; break;
    11a6:	e7 e3       	ldi	r30, 0x37	; 55
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	80 83       	st	Z, r24
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <M_DIO_void_SetPortDir+0x74>
		case PORTC_ID: DDRC = copy_u8_PortDir; break;
    11b0:	e4 e3       	ldi	r30, 0x34	; 52
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <M_DIO_void_SetPortDir+0x74>
		case PORTD_ID: DDRD = copy_u8_PortDir; break;
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
		default:       /* Wrong Port ID */     break;
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <M_DIO_void_SetPortVal>:

void M_DIO_void_SetPortVal (u8 copy_u8_PortID, u8 copy_u8_PortVal) {
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <M_DIO_void_SetPortVal+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <M_DIO_void_SetPortVal+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3c 83       	std	Y+4, r19	; 0x04
    11e8:	2b 83       	std	Y+3, r18	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	d1 f0       	breq	.+52     	; 0x1228 <M_DIO_void_SetPortVal+0x58>
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	3c 81       	ldd	r19, Y+4	; 0x04
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <M_DIO_void_SetPortVal+0x38>
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	61 f0       	breq	.+24     	; 0x121e <M_DIO_void_SetPortVal+0x4e>
    1206:	1e c0       	rjmp	.+60     	; 0x1244 <M_DIO_void_SetPortVal+0x74>
    1208:	2b 81       	ldd	r18, Y+3	; 0x03
    120a:	3c 81       	ldd	r19, Y+4	; 0x04
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <M_DIO_void_SetPortVal+0x62>
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	81 f0       	breq	.+32     	; 0x123c <M_DIO_void_SetPortVal+0x6c>
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <M_DIO_void_SetPortVal+0x74>
		case PORTA_ID: PORTA = copy_u8_PortVal; break;
    121e:	eb e3       	ldi	r30, 0x3B	; 59
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <M_DIO_void_SetPortVal+0x74>
		case PORTB_ID: PORTB = copy_u8_PortVal; break;
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <M_DIO_void_SetPortVal+0x74>
		case PORTC_ID: PORTC = copy_u8_PortVal; break;
    1232:	e5 e3       	ldi	r30, 0x35	; 53
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 83       	st	Z, r24
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <M_DIO_void_SetPortVal+0x74>
		case PORTD_ID: PORTD = copy_u8_PortVal; break;
    123c:	e2 e3       	ldi	r30, 0x32	; 50
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	80 83       	st	Z, r24
		default:       /* Wrong Port ID */      break;
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <M_DIO_void_SetLowerNibbleDir>:

/***
 * Nibble Functions
 ***/

void M_DIO_void_SetLowerNibbleDir(u8 copy_u8_PortID, u8 copy_u8_NibbleDir){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <M_DIO_void_SetLowerNibbleDir+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <M_DIO_void_SetLowerNibbleDir+0x8>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	6a 83       	std	Y+2, r22	; 0x02
    switch (copy_u8_PortID){
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	01 f1       	breq	.+64     	; 0x12b6 <M_DIO_void_SetLowerNibbleDir+0x64>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <M_DIO_void_SetLowerNibbleDir+0x38>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <M_DIO_void_SetLowerNibbleDir+0x4e>
    1288:	36 c0       	rjmp	.+108    	; 0x12f6 <M_DIO_void_SetLowerNibbleDir+0xa4>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	e1 f0       	breq	.+56     	; 0x12cc <M_DIO_void_SetLowerNibbleDir+0x7a>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	11 f1       	breq	.+68     	; 0x12e2 <M_DIO_void_SetLowerNibbleDir+0x90>
    129e:	2b c0       	rjmp	.+86     	; 0x12f6 <M_DIO_void_SetLowerNibbleDir+0xa4>
		case PORTA_ID: DDRA = (DDRA & LOWER_NIBBLE_MASK) | copy_u8_NibbleDir; break;
    12a0:	aa e3       	ldi	r26, 0x3A	; 58
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e3       	ldi	r30, 0x3A	; 58
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	98 2f       	mov	r25, r24
    12ac:	90 7f       	andi	r25, 0xF0	; 240
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	89 2b       	or	r24, r25
    12b2:	8c 93       	st	X, r24
    12b4:	20 c0       	rjmp	.+64     	; 0x12f6 <M_DIO_void_SetLowerNibbleDir+0xa4>
		case PORTB_ID: DDRB = (DDRB & LOWER_NIBBLE_MASK) | copy_u8_NibbleDir; break;
    12b6:	a7 e3       	ldi	r26, 0x37	; 55
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e7 e3       	ldi	r30, 0x37	; 55
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	98 2f       	mov	r25, r24
    12c2:	90 7f       	andi	r25, 0xF0	; 240
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	89 2b       	or	r24, r25
    12c8:	8c 93       	st	X, r24
    12ca:	15 c0       	rjmp	.+42     	; 0x12f6 <M_DIO_void_SetLowerNibbleDir+0xa4>
		case PORTC_ID: DDRC = (DDRC & LOWER_NIBBLE_MASK) | copy_u8_NibbleDir; break;
    12cc:	a4 e3       	ldi	r26, 0x34	; 52
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e4 e3       	ldi	r30, 0x34	; 52
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	98 2f       	mov	r25, r24
    12d8:	90 7f       	andi	r25, 0xF0	; 240
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	89 2b       	or	r24, r25
    12de:	8c 93       	st	X, r24
    12e0:	0a c0       	rjmp	.+20     	; 0x12f6 <M_DIO_void_SetLowerNibbleDir+0xa4>
		case PORTD_ID: DDRD = (DDRD & LOWER_NIBBLE_MASK) | copy_u8_NibbleDir; break;
    12e2:	a1 e3       	ldi	r26, 0x31	; 49
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e1 e3       	ldi	r30, 0x31	; 49
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	98 2f       	mov	r25, r24
    12ee:	90 7f       	andi	r25, 0xF0	; 240
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	89 2b       	or	r24, r25
    12f4:	8c 93       	st	X, r24
		default:       /* Wrong Port ID */                       break;
    }
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <M_DIO_void_SetUpperNibbleDir>:
void M_DIO_void_SetUpperNibbleDir(u8 copy_u8_PortID, u8 copy_u8_NibbleDir){
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <M_DIO_void_SetUpperNibbleDir+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <M_DIO_void_SetUpperNibbleDir+0x8>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3c 83       	std	Y+4, r19	; 0x04
    131c:	2b 83       	std	Y+3, r18	; 0x03
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	41 f1       	breq	.+80     	; 0x1378 <M_DIO_void_SetUpperNibbleDir+0x74>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <M_DIO_void_SetUpperNibbleDir+0x38>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 f0       	breq	.+24     	; 0x1352 <M_DIO_void_SetUpperNibbleDir+0x4e>
    133a:	56 c0       	rjmp	.+172    	; 0x13e8 <M_DIO_void_SetUpperNibbleDir+0xe4>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	61 f1       	breq	.+88     	; 0x139e <M_DIO_void_SetUpperNibbleDir+0x9a>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	d1 f1       	breq	.+116    	; 0x13c4 <M_DIO_void_SetUpperNibbleDir+0xc0>
    1350:	4b c0       	rjmp	.+150    	; 0x13e8 <M_DIO_void_SetUpperNibbleDir+0xe4>
		case PORTA_ID:
			DDRA = (DDRA & UPPER_NIBBLE_MASK) |
    1352:	aa e3       	ldi	r26, 0x3A	; 58
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ea e3       	ldi	r30, 0x3A	; 58
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	28 2f       	mov	r18, r24
    135e:	2f 70       	andi	r18, 0x0F	; 15
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	82 95       	swap	r24
    1368:	92 95       	swap	r25
    136a:	90 7f       	andi	r25, 0xF0	; 240
    136c:	98 27       	eor	r25, r24
    136e:	80 7f       	andi	r24, 0xF0	; 240
    1370:	98 27       	eor	r25, r24
    1372:	82 2b       	or	r24, r18
    1374:	8c 93       	st	X, r24
    1376:	38 c0       	rjmp	.+112    	; 0x13e8 <M_DIO_void_SetUpperNibbleDir+0xe4>
				   (copy_u8_NibbleDir << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTB_ID:
			DDRB = (DDRB & UPPER_NIBBLE_MASK) |
    1378:	a7 e3       	ldi	r26, 0x37	; 55
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e7 e3       	ldi	r30, 0x37	; 55
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	2f 70       	andi	r18, 0x0F	; 15
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	82 95       	swap	r24
    138e:	92 95       	swap	r25
    1390:	90 7f       	andi	r25, 0xF0	; 240
    1392:	98 27       	eor	r25, r24
    1394:	80 7f       	andi	r24, 0xF0	; 240
    1396:	98 27       	eor	r25, r24
    1398:	82 2b       	or	r24, r18
    139a:	8c 93       	st	X, r24
    139c:	25 c0       	rjmp	.+74     	; 0x13e8 <M_DIO_void_SetUpperNibbleDir+0xe4>
			       (copy_u8_NibbleDir << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTC_ID:
			DDRC = (DDRC & UPPER_NIBBLE_MASK) |
    139e:	a4 e3       	ldi	r26, 0x34	; 52
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e4 e3       	ldi	r30, 0x34	; 52
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	2f 70       	andi	r18, 0x0F	; 15
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	82 95       	swap	r24
    13b4:	92 95       	swap	r25
    13b6:	90 7f       	andi	r25, 0xF0	; 240
    13b8:	98 27       	eor	r25, r24
    13ba:	80 7f       	andi	r24, 0xF0	; 240
    13bc:	98 27       	eor	r25, r24
    13be:	82 2b       	or	r24, r18
    13c0:	8c 93       	st	X, r24
    13c2:	12 c0       	rjmp	.+36     	; 0x13e8 <M_DIO_void_SetUpperNibbleDir+0xe4>
			       (copy_u8_NibbleDir << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTD_ID:
			DDRD = (DDRD & UPPER_NIBBLE_MASK) |
    13c4:	a1 e3       	ldi	r26, 0x31	; 49
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	28 2f       	mov	r18, r24
    13d0:	2f 70       	andi	r18, 0x0F	; 15
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	82 95       	swap	r24
    13da:	92 95       	swap	r25
    13dc:	90 7f       	andi	r25, 0xF0	; 240
    13de:	98 27       	eor	r25, r24
    13e0:	80 7f       	andi	r24, 0xF0	; 240
    13e2:	98 27       	eor	r25, r24
    13e4:	82 2b       	or	r24, r18
    13e6:	8c 93       	st	X, r24
			       (copy_u8_NibbleDir << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		default:       /* Wrong Port ID */                       break;
	}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <M_DIO_void_SetLowerNibbleVal>:

void M_DIO_void_SetLowerNibbleVal(u8 copy_u8_PortID, u8 copy_u8_NibbleVal){
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <M_DIO_void_SetLowerNibbleVal+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <M_DIO_void_SetLowerNibbleVal+0x8>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3c 83       	std	Y+4, r19	; 0x04
    140e:	2b 83       	std	Y+3, r18	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	01 f1       	breq	.+64     	; 0x145a <M_DIO_void_SetLowerNibbleVal+0x64>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	2c f4       	brge	.+10     	; 0x142e <M_DIO_void_SetLowerNibbleVal+0x38>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	61 f0       	breq	.+24     	; 0x1444 <M_DIO_void_SetLowerNibbleVal+0x4e>
    142c:	36 c0       	rjmp	.+108    	; 0x149a <M_DIO_void_SetLowerNibbleVal+0xa4>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	e1 f0       	breq	.+56     	; 0x1470 <M_DIO_void_SetLowerNibbleVal+0x7a>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	91 05       	cpc	r25, r1
    1440:	11 f1       	breq	.+68     	; 0x1486 <M_DIO_void_SetLowerNibbleVal+0x90>
    1442:	2b c0       	rjmp	.+86     	; 0x149a <M_DIO_void_SetLowerNibbleVal+0xa4>
		case PORTA_ID: PORTA = (PORTA & LOWER_NIBBLE_MASK) | copy_u8_NibbleVal; break;
    1444:	ab e3       	ldi	r26, 0x3B	; 59
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	eb e3       	ldi	r30, 0x3B	; 59
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	98 2f       	mov	r25, r24
    1450:	90 7f       	andi	r25, 0xF0	; 240
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	89 2b       	or	r24, r25
    1456:	8c 93       	st	X, r24
    1458:	20 c0       	rjmp	.+64     	; 0x149a <M_DIO_void_SetLowerNibbleVal+0xa4>
		case PORTB_ID: PORTB = (PORTB & LOWER_NIBBLE_MASK) | copy_u8_NibbleVal; break;
    145a:	a8 e3       	ldi	r26, 0x38	; 56
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e8 e3       	ldi	r30, 0x38	; 56
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	98 2f       	mov	r25, r24
    1466:	90 7f       	andi	r25, 0xF0	; 240
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	89 2b       	or	r24, r25
    146c:	8c 93       	st	X, r24
    146e:	15 c0       	rjmp	.+42     	; 0x149a <M_DIO_void_SetLowerNibbleVal+0xa4>
		case PORTC_ID: PORTC = (PORTC & LOWER_NIBBLE_MASK) | copy_u8_NibbleVal; break;
    1470:	a5 e3       	ldi	r26, 0x35	; 53
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e3       	ldi	r30, 0x35	; 53
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	98 2f       	mov	r25, r24
    147c:	90 7f       	andi	r25, 0xF0	; 240
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	89 2b       	or	r24, r25
    1482:	8c 93       	st	X, r24
    1484:	0a c0       	rjmp	.+20     	; 0x149a <M_DIO_void_SetLowerNibbleVal+0xa4>
		case PORTD_ID: PORTD = (PORTD & LOWER_NIBBLE_MASK) | copy_u8_NibbleVal; break;
    1486:	a2 e3       	ldi	r26, 0x32	; 50
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e2 e3       	ldi	r30, 0x32	; 50
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	98 2f       	mov	r25, r24
    1492:	90 7f       	andi	r25, 0xF0	; 240
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	89 2b       	or	r24, r25
    1498:	8c 93       	st	X, r24
		default:       /* Wrong Port ID */                       break;
	}
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <M_DIO_void_SetUpperNibbleVal>:

void M_DIO_void_SetUpperNibbleVal(u8 copy_u8_PortID, u8 copy_u8_NibbleVal){
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <M_DIO_void_SetUpperNibbleVal+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <M_DIO_void_SetUpperNibbleVal+0x8>
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_u8_PortID){
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 05       	cpc	r25, r1
    14ca:	41 f1       	breq	.+80     	; 0x151c <M_DIO_void_SetUpperNibbleVal+0x74>
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <M_DIO_void_SetUpperNibbleVal+0x38>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	61 f0       	breq	.+24     	; 0x14f6 <M_DIO_void_SetUpperNibbleVal+0x4e>
    14de:	56 c0       	rjmp	.+172    	; 0x158c <M_DIO_void_SetUpperNibbleVal+0xe4>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	61 f1       	breq	.+88     	; 0x1542 <M_DIO_void_SetUpperNibbleVal+0x9a>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	d1 f1       	breq	.+116    	; 0x1568 <M_DIO_void_SetUpperNibbleVal+0xc0>
    14f4:	4b c0       	rjmp	.+150    	; 0x158c <M_DIO_void_SetUpperNibbleVal+0xe4>
		case PORTA_ID:
			PORTA = (PORTA & UPPER_NIBBLE_MASK) |
    14f6:	ab e3       	ldi	r26, 0x3B	; 59
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	eb e3       	ldi	r30, 0x3B	; 59
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	2f 70       	andi	r18, 0x0F	; 15
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	82 95       	swap	r24
    150c:	92 95       	swap	r25
    150e:	90 7f       	andi	r25, 0xF0	; 240
    1510:	98 27       	eor	r25, r24
    1512:	80 7f       	andi	r24, 0xF0	; 240
    1514:	98 27       	eor	r25, r24
    1516:	82 2b       	or	r24, r18
    1518:	8c 93       	st	X, r24
    151a:	38 c0       	rjmp	.+112    	; 0x158c <M_DIO_void_SetUpperNibbleVal+0xe4>
			       (copy_u8_NibbleVal << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTB_ID:
			PORTB = (PORTB & UPPER_NIBBLE_MASK) |
    151c:	a8 e3       	ldi	r26, 0x38	; 56
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e8 e3       	ldi	r30, 0x38	; 56
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	2f 70       	andi	r18, 0x0F	; 15
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	82 95       	swap	r24
    1532:	92 95       	swap	r25
    1534:	90 7f       	andi	r25, 0xF0	; 240
    1536:	98 27       	eor	r25, r24
    1538:	80 7f       	andi	r24, 0xF0	; 240
    153a:	98 27       	eor	r25, r24
    153c:	82 2b       	or	r24, r18
    153e:	8c 93       	st	X, r24
    1540:	25 c0       	rjmp	.+74     	; 0x158c <M_DIO_void_SetUpperNibbleVal+0xe4>
			       (copy_u8_NibbleVal << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTC_ID:
			PORTC = (PORTC & UPPER_NIBBLE_MASK) |
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	2f 70       	andi	r18, 0x0F	; 15
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	82 95       	swap	r24
    1558:	92 95       	swap	r25
    155a:	90 7f       	andi	r25, 0xF0	; 240
    155c:	98 27       	eor	r25, r24
    155e:	80 7f       	andi	r24, 0xF0	; 240
    1560:	98 27       	eor	r25, r24
    1562:	82 2b       	or	r24, r18
    1564:	8c 93       	st	X, r24
    1566:	12 c0       	rjmp	.+36     	; 0x158c <M_DIO_void_SetUpperNibbleVal+0xe4>
			       (copy_u8_NibbleVal << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		case PORTD_ID:
			PORTD = (PORTD & UPPER_NIBBLE_MASK) |
    1568:	a2 e3       	ldi	r26, 0x32	; 50
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e2 e3       	ldi	r30, 0x32	; 50
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	2f 70       	andi	r18, 0x0F	; 15
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	82 95       	swap	r24
    157e:	92 95       	swap	r25
    1580:	90 7f       	andi	r25, 0xF0	; 240
    1582:	98 27       	eor	r25, r24
    1584:	80 7f       	andi	r24, 0xF0	; 240
    1586:	98 27       	eor	r25, r24
    1588:	82 2b       	or	r24, r18
    158a:	8c 93       	st	X, r24
			       (copy_u8_NibbleVal << UPPER_NIBBLE_ADJUST_POSITION);
			break;
		default:       /* Wrong Port ID */                       break;
	}
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <H_KPD_void_Init>:

/*************************************************************************************
 *                               Public Function Definition                          *
 *************************************************************************************/

void H_KPD_void_Init(void) {
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <H_KPD_void_Init+0x6>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	/* Set Columns as Output */
	for (u8 local_u8_PinID = COL_START; local_u8_PinID <= COL_END; local_u8_PinID++) {
    15a4:	1a 82       	std	Y+2, r1	; 0x02
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <H_KPD_void_Init+0x1e>
		M_DIO_void_SetPinDir(KPD_PORT, local_u8_PinID, PIN_OUTPUT_ID);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	6a 81       	ldd	r22, Y+2	; 0x02
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
 *                               Public Function Definition                          *
 *************************************************************************************/

void H_KPD_void_Init(void) {
	/* Set Columns as Output */
	for (u8 local_u8_PinID = COL_START; local_u8_PinID <= COL_END; local_u8_PinID++) {
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	84 30       	cpi	r24, 0x04	; 4
    15bc:	a8 f3       	brcs	.-22     	; 0x15a8 <H_KPD_void_Init+0xe>
		M_DIO_void_SetPinDir(KPD_PORT, local_u8_PinID, PIN_OUTPUT_ID);
	}
	/* Set Rows as Inputs & Pulled up */
	for (u8 local_u8_PinID = ROW_START; local_u8_PinID <= ROW_END; local_u8_PinID++) {
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <H_KPD_void_Init+0x44>
		M_DIO_void_SetPinDir(KPD_PORT, local_u8_PinID, PIN_INPUT_ID);
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	69 81       	ldd	r22, Y+1	; 0x01
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_PinID, PIN_HIGH_ID);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	69 81       	ldd	r22, Y+1	; 0x01
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	/* Set Columns as Output */
	for (u8 local_u8_PinID = COL_START; local_u8_PinID <= COL_END; local_u8_PinID++) {
		M_DIO_void_SetPinDir(KPD_PORT, local_u8_PinID, PIN_OUTPUT_ID);
	}
	/* Set Rows as Inputs & Pulled up */
	for (u8 local_u8_PinID = ROW_START; local_u8_PinID <= ROW_END; local_u8_PinID++) {
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	88 30       	cpi	r24, 0x08	; 8
    15e2:	80 f3       	brcs	.-32     	; 0x15c4 <H_KPD_void_Init+0x2a>
		M_DIO_void_SetPinDir(KPD_PORT, local_u8_PinID, PIN_INPUT_ID);
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_PinID, PIN_HIGH_ID);
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <H_KPD_void_GetPressedKey>:

void H_KPD_void_GetPressedKey(u8* copy_Pu8_PressedKey){
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	64 97       	sbiw	r28, 0x14	; 20
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	9c 8b       	std	Y+20, r25	; 0x14
    1604:	8b 8b       	std	Y+19, r24	; 0x13
	u8 local_u8_Column, local_u8_Row, local_u8_PinVal;
	/* Initialize the switch status to NOT Pressed as a default value */
	u8 local_u8_PressedKey = KPD_NOT_PRESSED;
    1606:	8f ef       	ldi	r24, 0xFF	; 255
    1608:	8f 87       	std	Y+15, r24	; 0x0f
	/* Looping on columns of the Key Pad */
	for (local_u8_Column = COL_START; local_u8_Column <= COL_END; local_u8_Column++) {
    160a:	19 8a       	std	Y+17, r1	; 0x11
    160c:	b6 c0       	rjmp	.+364    	; 0x177a <H_KPD_void_GetPressedKey+0x18c>
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_Column, PIN_LOW_ID); /* Activate the Column */
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	69 89       	ldd	r22, Y+17	; 0x11
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
		/* Loop on the rows of the Key Pad */
		for (local_u8_Row = ROW_START; local_u8_Row <= ROW_END; local_u8_Row++) {
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	88 8b       	std	Y+16, r24	; 0x10
    161c:	a2 c0       	rjmp	.+324    	; 0x1762 <H_KPD_void_GetPressedKey+0x174>
			/* Check the status of the switch */
			M_DIO_void_GetPinVal(KPD_PORT, local_u8_Row, &local_u8_PinVal);
    161e:	9e 01       	movw	r18, r28
    1620:	2e 5e       	subi	r18, 0xEE	; 238
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	68 89       	ldd	r22, Y+16	; 0x10
    1628:	a9 01       	movw	r20, r18
    162a:	0e 94 24 08 	call	0x1048	; 0x1048 <M_DIO_void_GetPinVal>
			if (local_u8_PinVal == 0) {
    162e:	8a 89       	ldd	r24, Y+18	; 0x12
    1630:	88 23       	and	r24, r24
    1632:	09 f0       	breq	.+2      	; 0x1636 <H_KPD_void_GetPressedKey+0x48>
    1634:	93 c0       	rjmp	.+294    	; 0x175c <H_KPD_void_GetPressedKey+0x16e>
				/* Get the value of the currently pressed switch */
				local_u8_PressedKey = global_Au8_SwitchVal[local_u8_Row - ROW_START][local_u8_Column - COL_START];
    1636:	88 89       	ldd	r24, Y+16	; 0x10
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	ac 01       	movw	r20, r24
    163e:	44 50       	subi	r20, 0x04	; 4
    1640:	50 40       	sbci	r21, 0x00	; 0
    1642:	89 89       	ldd	r24, Y+17	; 0x11
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	ca 01       	movw	r24, r20
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	fc 01       	movw	r30, r24
    1658:	e4 57       	subi	r30, 0x74	; 116
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	8f 87       	std	Y+15, r24	; 0x0f
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <H_KPD_void_GetPressedKey+0x84>
				/* Wait until the switch is released (Single Press) */
				while (local_u8_PinVal == 0) {
					M_DIO_void_GetPinVal(KPD_PORT, local_u8_Row, &local_u8_PinVal);
    1662:	9e 01       	movw	r18, r28
    1664:	2e 5e       	subi	r18, 0xEE	; 238
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	68 89       	ldd	r22, Y+16	; 0x10
    166c:	a9 01       	movw	r20, r18
    166e:	0e 94 24 08 	call	0x1048	; 0x1048 <M_DIO_void_GetPinVal>
			M_DIO_void_GetPinVal(KPD_PORT, local_u8_Row, &local_u8_PinVal);
			if (local_u8_PinVal == 0) {
				/* Get the value of the currently pressed switch */
				local_u8_PressedKey = global_Au8_SwitchVal[local_u8_Row - ROW_START][local_u8_Column - COL_START];
				/* Wait until the switch is released (Single Press) */
				while (local_u8_PinVal == 0) {
    1672:	8a 89       	ldd	r24, Y+18	; 0x12
    1674:	88 23       	and	r24, r24
    1676:	a9 f3       	breq	.-22     	; 0x1662 <H_KPD_void_GetPressedKey+0x74>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 ea       	ldi	r26, 0xA0	; 160
    167e:	b1 e4       	ldi	r27, 0x41	; 65
    1680:	8b 87       	std	Y+11, r24	; 0x0b
    1682:	9c 87       	std	Y+12, r25	; 0x0c
    1684:	ad 87       	std	Y+13, r26	; 0x0d
    1686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8f 83       	std	Y+7, r24	; 0x07
    16a2:	98 87       	std	Y+8, r25	; 0x08
    16a4:	a9 87       	std	Y+9, r26	; 0x09
    16a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <H_KPD_void_GetPressedKey+0xdc>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <H_KPD_void_GetPressedKey+0x15a>
	else if (__tmp > 65535)
    16ca:	6f 81       	ldd	r22, Y+7	; 0x07
    16cc:	78 85       	ldd	r23, Y+8	; 0x08
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <H_KPD_void_GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	0f c0       	rjmp	.+30     	; 0x172a <H_KPD_void_GetPressedKey+0x13c>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <H_KPD_void_GetPressedKey+0x12a>
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	9e 81       	ldd	r25, Y+6	; 0x06
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <H_KPD_void_GetPressedKey+0x11e>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <H_KPD_void_GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <H_KPD_void_GetPressedKey+0x166>
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
	u8 local_u8_PressedKey = KPD_NOT_PRESSED;
	/* Looping on columns of the Key Pad */
	for (local_u8_Column = COL_START; local_u8_Column <= COL_END; local_u8_Column++) {
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_Column, PIN_LOW_ID); /* Activate the Column */
		/* Loop on the rows of the Key Pad */
		for (local_u8_Row = ROW_START; local_u8_Row <= ROW_END; local_u8_Row++) {
    175c:	88 89       	ldd	r24, Y+16	; 0x10
    175e:	8f 5f       	subi	r24, 0xFF	; 255
    1760:	88 8b       	std	Y+16, r24	; 0x10
    1762:	88 89       	ldd	r24, Y+16	; 0x10
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	08 f4       	brcc	.+2      	; 0x176a <H_KPD_void_GetPressedKey+0x17c>
    1768:	5a cf       	rjmp	.-332    	; 0x161e <H_KPD_void_GetPressedKey+0x30>
					M_DIO_void_GetPinVal(KPD_PORT, local_u8_Row, &local_u8_PinVal);
				}
				_delay_ms(20); /* Delay to avoid bouncing */
			}
		}
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_Column, PIN_HIGH_ID); /* Deactivate the Column */
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	69 89       	ldd	r22, Y+17	; 0x11
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
void H_KPD_void_GetPressedKey(u8* copy_Pu8_PressedKey){
	u8 local_u8_Column, local_u8_Row, local_u8_PinVal;
	/* Initialize the switch status to NOT Pressed as a default value */
	u8 local_u8_PressedKey = KPD_NOT_PRESSED;
	/* Looping on columns of the Key Pad */
	for (local_u8_Column = COL_START; local_u8_Column <= COL_END; local_u8_Column++) {
    1774:	89 89       	ldd	r24, Y+17	; 0x11
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	89 8b       	std	Y+17, r24	; 0x11
    177a:	89 89       	ldd	r24, Y+17	; 0x11
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	08 f4       	brcc	.+2      	; 0x1782 <H_KPD_void_GetPressedKey+0x194>
    1780:	46 cf       	rjmp	.-372    	; 0x160e <H_KPD_void_GetPressedKey+0x20>
				_delay_ms(20); /* Delay to avoid bouncing */
			}
		}
		M_DIO_void_SetPinVal(KPD_PORT, local_u8_Column, PIN_HIGH_ID); /* Deactivate the Column */
	}
	*copy_Pu8_PressedKey = local_u8_PressedKey; /* Returning the value */
    1782:	eb 89       	ldd	r30, Y+19	; 0x13
    1784:	fc 89       	ldd	r31, Y+20	; 0x14
    1786:	8f 85       	ldd	r24, Y+15	; 0x0f
    1788:	80 83       	st	Z, r24
}
    178a:	64 96       	adiw	r28, 0x14	; 20
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <H_LCD_void_Init>:

/*************************************************************************************
 *                               Public Function Definition                          *
 *************************************************************************************/

void H_LCD_void_Init(void) {
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	c4 55       	subi	r28, 0x54	; 84
    17aa:	d0 40       	sbci	r29, 0x00	; 0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
	M_DIO_void_SetPortDir(LCD_DATA_PORT, PORT_OUTPUT_ID);
#elif (LCD_MODE == MODE_4BIT)
#if (DATA_PORT_NIBBLE == LOWER)
	M_DIO_void_SetLowerNibbleDir(LCD_DATA_PORT, NIBBLE_OUTPUT_ID);
#elif (DATA_PORT_NIBBLE == UPPER)
	M_DIO_void_SetUpperNibbleDir(LCD_DATA_PORT, NIBBLE_OUTPUT_ID);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	6f e0       	ldi	r22, 0x0F	; 15
    17ba:	0e 94 82 09 	call	0x1304	; 0x1304 <M_DIO_void_SetUpperNibbleDir>
#endif
#endif
	/* Set Control pins as output */
	M_DIO_void_SetPinDir(RS_PORT, RS_PIN, PIN_OUTPUT_ID);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir(RW_PORT, RW_PIN, PIN_OUTPUT_ID);
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir(EN_PORT, EN_PIN, PIN_OUTPUT_ID);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	62 e0       	ldi	r22, 0x02	; 2
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
    17dc:	fe 01       	movw	r30, r28
    17de:	ef 5a       	subi	r30, 0xAF	; 175
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 ef       	ldi	r26, 0xF0	; 240
    17e8:	b1 e4       	ldi	r27, 0x41	; 65
    17ea:	80 83       	st	Z, r24
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	a2 83       	std	Z+2, r26	; 0x02
    17f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f2:	8e 01       	movw	r16, r28
    17f4:	03 5b       	subi	r16, 0xB3	; 179
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	fe 01       	movw	r30, r28
    17fa:	ef 5a       	subi	r30, 0xAF	; 175
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	60 81       	ld	r22, Z
    1800:	71 81       	ldd	r23, Z+1	; 0x01
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a ef       	ldi	r20, 0xFA	; 250
    180c:	54 e4       	ldi	r21, 0x44	; 68
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	f8 01       	movw	r30, r16
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1820:	fe 01       	movw	r30, r28
    1822:	e3 5b       	subi	r30, 0xB3	; 179
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	44 f4       	brge	.+16     	; 0x184e <H_LCD_void_Init+0xb2>
		__ticks = 1;
    183e:	fe 01       	movw	r30, r28
    1840:	e5 5b       	subi	r30, 0xB5	; 181
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	80 83       	st	Z, r24
    184c:	64 c0       	rjmp	.+200    	; 0x1916 <H_LCD_void_Init+0x17a>
	else if (__tmp > 65535)
    184e:	fe 01       	movw	r30, r28
    1850:	e3 5b       	subi	r30, 0xB3	; 179
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	0c f0       	brlt	.+2      	; 0x186e <H_LCD_void_Init+0xd2>
    186c:	43 c0       	rjmp	.+134    	; 0x18f4 <H_LCD_void_Init+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	fe 01       	movw	r30, r28
    1870:	ef 5a       	subi	r30, 0xAF	; 175
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8e 01       	movw	r16, r28
    188e:	05 5b       	subi	r16, 0xB5	; 181
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	f8 01       	movw	r30, r16
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	80 83       	st	Z, r24
    18a4:	1f c0       	rjmp	.+62     	; 0x18e4 <H_LCD_void_Init+0x148>
    18a6:	fe 01       	movw	r30, r28
    18a8:	e7 5b       	subi	r30, 0xB7	; 183
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	fe 01       	movw	r30, r28
    18b6:	e7 5b       	subi	r30, 0xB7	; 183
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <H_LCD_void_Init+0x122>
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5b       	subi	r30, 0xB7	; 183
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18cc:	de 01       	movw	r26, r28
    18ce:	a5 5b       	subi	r26, 0xB5	; 181
    18d0:	bf 4f       	sbci	r27, 0xFF	; 255
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5b       	subi	r30, 0xB5	; 181
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	80 81       	ld	r24, Z
    18da:	91 81       	ldd	r25, Z+1	; 0x01
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	9c 93       	st	X, r25
    18e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	fe 01       	movw	r30, r28
    18e6:	e5 5b       	subi	r30, 0xB5	; 181
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	d1 f6       	brne	.-76     	; 0x18a6 <H_LCD_void_Init+0x10a>
    18f2:	27 c0       	rjmp	.+78     	; 0x1942 <H_LCD_void_Init+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f4:	8e 01       	movw	r16, r28
    18f6:	05 5b       	subi	r16, 0xB5	; 181
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	e3 5b       	subi	r30, 0xB3	; 179
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	60 81       	ld	r22, Z
    1902:	71 81       	ldd	r23, Z+1	; 0x01
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	f8 01       	movw	r30, r16
    1912:	91 83       	std	Z+1, r25	; 0x01
    1914:	80 83       	st	Z, r24
    1916:	de 01       	movw	r26, r28
    1918:	a9 5b       	subi	r26, 0xB9	; 185
    191a:	bf 4f       	sbci	r27, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	e5 5b       	subi	r30, 0xB5	; 181
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	8d 93       	st	X+, r24
    1928:	9c 93       	st	X, r25
    192a:	fe 01       	movw	r30, r28
    192c:	e9 5b       	subi	r30, 0xB9	; 185
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <H_LCD_void_Init+0x198>
    1938:	fe 01       	movw	r30, r28
    193a:	e9 5b       	subi	r30, 0xB9	; 185
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
	_delay_ms(30); /* Delay 30ms to ensure the initialization of the LCD driver */
	H_LCD_void_SendCommand(CMD_RETURN_HOME); _delay_ms(15); /* Return Home */
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
    1948:	fe 01       	movw	r30, r28
    194a:	ed 5b       	subi	r30, 0xBD	; 189
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e7       	ldi	r26, 0x70	; 112
    1954:	b1 e4       	ldi	r27, 0x41	; 65
    1956:	80 83       	st	Z, r24
    1958:	91 83       	std	Z+1, r25	; 0x01
    195a:	a2 83       	std	Z+2, r26	; 0x02
    195c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195e:	8e 01       	movw	r16, r28
    1960:	01 5c       	subi	r16, 0xC1	; 193
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	fe 01       	movw	r30, r28
    1966:	ed 5b       	subi	r30, 0xBD	; 189
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	60 81       	ld	r22, Z
    196c:	71 81       	ldd	r23, Z+1	; 0x01
    196e:	82 81       	ldd	r24, Z+2	; 0x02
    1970:	93 81       	ldd	r25, Z+3	; 0x03
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a ef       	ldi	r20, 0xFA	; 250
    1978:	54 e4       	ldi	r21, 0x44	; 68
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	f8 01       	movw	r30, r16
    1984:	80 83       	st	Z, r24
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	a2 83       	std	Z+2, r26	; 0x02
    198a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    198c:	fe 01       	movw	r30, r28
    198e:	ff 96       	adiw	r30, 0x3f	; 63
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a4:	88 23       	and	r24, r24
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <H_LCD_void_Init+0x216>
		__ticks = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9e af       	std	Y+62, r25	; 0x3e
    19ae:	8d af       	std	Y+61, r24	; 0x3d
    19b0:	46 c0       	rjmp	.+140    	; 0x1a3e <H_LCD_void_Init+0x2a2>
	else if (__tmp > 65535)
    19b2:	fe 01       	movw	r30, r28
    19b4:	ff 96       	adiw	r30, 0x3f	; 63
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	64 f5       	brge	.+88     	; 0x1a26 <H_LCD_void_Init+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 5b       	subi	r30, 0xBD	; 189
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e af       	std	Y+62, r25	; 0x3e
    19fa:	8d af       	std	Y+61, r24	; 0x3d
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <H_LCD_void_Init+0x280>
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c af       	std	Y+60, r25	; 0x3c
    1a04:	8b af       	std	Y+59, r24	; 0x3b
    1a06:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a08:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <H_LCD_void_Init+0x26e>
    1a0e:	9c af       	std	Y+60, r25	; 0x3c
    1a10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9e af       	std	Y+62, r25	; 0x3e
    1a1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <H_LCD_void_Init+0x262>
    1a24:	16 c0       	rjmp	.+44     	; 0x1a52 <H_LCD_void_Init+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	fe 01       	movw	r30, r28
    1a28:	ff 96       	adiw	r30, 0x3f	; 63
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e af       	std	Y+62, r25	; 0x3e
    1a3c:	8d af       	std	Y+61, r24	; 0x3d
    1a3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a42:	9a af       	std	Y+58, r25	; 0x3a
    1a44:	89 af       	std	Y+57, r24	; 0x39
    1a46:	89 ad       	ldd	r24, Y+57	; 0x39
    1a48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <H_LCD_void_Init+0x2ae>
    1a4e:	9a af       	std	Y+58, r25	; 0x3a
    1a50:	89 af       	std	Y+57, r24	; 0x39
	/* Function Set */
#if (LCD_MODE == MODE_8BIT)
	H_LCD_void_SendCommand(CMD_SET_8BITS_2LINES); _delay_ms(1); /* Configure as 8-bit data mode*/
#elif (LCD_MODE == MODE_4BIT)
	H_LCD_void_SendCommand(CMD_SET_4BITS_2LINES); _delay_ms(1); /* Configure as 4-bit data mode*/
    1a52:	88 e2       	ldi	r24, 0x28	; 40
    1a54:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	8d ab       	std	Y+53, r24	; 0x35
    1a62:	9e ab       	std	Y+54, r25	; 0x36
    1a64:	af ab       	std	Y+55, r26	; 0x37
    1a66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a68:	6d a9       	ldd	r22, Y+53	; 0x35
    1a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	4a ef       	ldi	r20, 0xFA	; 250
    1a76:	54 e4       	ldi	r21, 0x44	; 68
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	89 ab       	std	Y+49, r24	; 0x31
    1a82:	9a ab       	std	Y+50, r25	; 0x32
    1a84:	ab ab       	std	Y+51, r26	; 0x33
    1a86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a88:	69 a9       	ldd	r22, Y+49	; 0x31
    1a8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	2c f4       	brge	.+10     	; 0x1aaa <H_LCD_void_Init+0x30e>
		__ticks = 1;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	3f c0       	rjmp	.+126    	; 0x1b28 <H_LCD_void_Init+0x38c>
	else if (__tmp > 65535)
    1aaa:	69 a9       	ldd	r22, Y+49	; 0x31
    1aac:	7a a9       	ldd	r23, Y+50	; 0x32
    1aae:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	3f ef       	ldi	r19, 0xFF	; 255
    1ab6:	4f e7       	ldi	r20, 0x7F	; 127
    1ab8:	57 e4       	ldi	r21, 0x47	; 71
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abe:	18 16       	cp	r1, r24
    1ac0:	4c f5       	brge	.+82     	; 0x1b14 <H_LCD_void_Init+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e2       	ldi	r20, 0x20	; 32
    1ad0:	51 e4       	ldi	r21, 0x41	; 65
    1ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	bc 01       	movw	r22, r24
    1adc:	cd 01       	movw	r24, r26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	98 ab       	std	Y+48, r25	; 0x30
    1ae8:	8f a7       	std	Y+47, r24	; 0x2f
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <H_LCD_void_Init+0x36e>
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e a7       	std	Y+46, r25	; 0x2e
    1af2:	8d a7       	std	Y+45, r24	; 0x2d
    1af4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <H_LCD_void_Init+0x35c>
    1afc:	9e a7       	std	Y+46, r25	; 0x2e
    1afe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b02:	98 a9       	ldd	r25, Y+48	; 0x30
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	98 ab       	std	Y+48, r25	; 0x30
    1b08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	69 f7       	brne	.-38     	; 0x1aec <H_LCD_void_Init+0x350>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <H_LCD_void_Init+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	69 a9       	ldd	r22, Y+49	; 0x31
    1b16:	7a a9       	ldd	r23, Y+50	; 0x32
    1b18:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
    1b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2c:	9c a7       	std	Y+44, r25	; 0x2c
    1b2e:	8b a7       	std	Y+43, r24	; 0x2b
    1b30:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b32:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <H_LCD_void_Init+0x398>
    1b38:	9c a7       	std	Y+44, r25	; 0x2c
    1b3a:	8b a7       	std	Y+43, r24	; 0x2b
#endif
	H_LCD_void_SendCommand(CMD_DISPLAY_ON);	_delay_ms(1);  /* Display ON OFF Control */
    1b3c:	8c e0       	ldi	r24, 0x0C	; 12
    1b3e:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a0 e8       	ldi	r26, 0x80	; 128
    1b48:	bf e3       	ldi	r27, 0x3F	; 63
    1b4a:	8f a3       	std	Y+39, r24	; 0x27
    1b4c:	98 a7       	std	Y+40, r25	; 0x28
    1b4e:	a9 a7       	std	Y+41, r26	; 0x29
    1b50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b52:	6f a1       	ldd	r22, Y+39	; 0x27
    1b54:	78 a5       	ldd	r23, Y+40	; 0x28
    1b56:	89 a5       	ldd	r24, Y+41	; 0x29
    1b58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	4a ef       	ldi	r20, 0xFA	; 250
    1b60:	54 e4       	ldi	r21, 0x44	; 68
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	8b a3       	std	Y+35, r24	; 0x23
    1b6c:	9c a3       	std	Y+36, r25	; 0x24
    1b6e:	ad a3       	std	Y+37, r26	; 0x25
    1b70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b72:	6b a1       	ldd	r22, Y+35	; 0x23
    1b74:	7c a1       	ldd	r23, Y+36	; 0x24
    1b76:	8d a1       	ldd	r24, Y+37	; 0x25
    1b78:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e8       	ldi	r20, 0x80	; 128
    1b80:	5f e3       	ldi	r21, 0x3F	; 63
    1b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b86:	88 23       	and	r24, r24
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <H_LCD_void_Init+0x3f8>
		__ticks = 1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	3f c0       	rjmp	.+126    	; 0x1c12 <H_LCD_void_Init+0x476>
	else if (__tmp > 65535)
    1b94:	6b a1       	ldd	r22, Y+35	; 0x23
    1b96:	7c a1       	ldd	r23, Y+36	; 0x24
    1b98:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ba0:	4f e7       	ldi	r20, 0x7F	; 127
    1ba2:	57 e4       	ldi	r21, 0x47	; 71
    1ba4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba8:	18 16       	cp	r1, r24
    1baa:	4c f5       	brge	.+82     	; 0x1bfe <H_LCD_void_Init+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bac:	6f a1       	ldd	r22, Y+39	; 0x27
    1bae:	78 a5       	ldd	r23, Y+40	; 0x28
    1bb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1bb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e2       	ldi	r20, 0x20	; 32
    1bba:	51 e4       	ldi	r21, 0x41	; 65
    1bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <H_LCD_void_Init+0x458>
    1bd6:	88 ec       	ldi	r24, 0xC8	; 200
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	98 a3       	std	Y+32, r25	; 0x20
    1bdc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1be0:	98 a1       	ldd	r25, Y+32	; 0x20
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <H_LCD_void_Init+0x446>
    1be6:	98 a3       	std	Y+32, r25	; 0x20
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	89 a1       	ldd	r24, Y+33	; 0x21
    1bec:	9a a1       	ldd	r25, Y+34	; 0x22
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	9a a3       	std	Y+34, r25	; 0x22
    1bf2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <H_LCD_void_Init+0x43a>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <H_LCD_void_Init+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfe:	6b a1       	ldd	r22, Y+35	; 0x23
    1c00:	7c a1       	ldd	r23, Y+36	; 0x24
    1c02:	8d a1       	ldd	r24, Y+37	; 0x25
    1c04:	9e a1       	ldd	r25, Y+38	; 0x26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9a a3       	std	Y+34, r25	; 0x22
    1c10:	89 a3       	std	Y+33, r24	; 0x21
    1c12:	89 a1       	ldd	r24, Y+33	; 0x21
    1c14:	9a a1       	ldd	r25, Y+34	; 0x22
    1c16:	9e 8f       	std	Y+30, r25	; 0x1e
    1c18:	8d 8f       	std	Y+29, r24	; 0x1d
    1c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <H_LCD_void_Init+0x482>
    1c22:	9e 8f       	std	Y+30, r25	; 0x1e
    1c24:	8d 8f       	std	Y+29, r24	; 0x1d
	H_LCD_void_SendCommand(CMD_CLEAR);      _delay_ms(15); /* Clear Display */
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e7       	ldi	r26, 0x70	; 112
    1c32:	b1 e4       	ldi	r27, 0x41	; 65
    1c34:	89 8f       	std	Y+25, r24	; 0x19
    1c36:	9a 8f       	std	Y+26, r25	; 0x1a
    1c38:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a ef       	ldi	r20, 0xFA	; 250
    1c4a:	54 e4       	ldi	r21, 0x44	; 68
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8d 8b       	std	Y+21, r24	; 0x15
    1c56:	9e 8b       	std	Y+22, r25	; 0x16
    1c58:	af 8b       	std	Y+23, r26	; 0x17
    1c5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c60:	8f 89       	ldd	r24, Y+23	; 0x17
    1c62:	98 8d       	ldd	r25, Y+24	; 0x18
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <H_LCD_void_Init+0x4e2>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <H_LCD_void_Init+0x560>
	else if (__tmp > 65535)
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <H_LCD_void_Init+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	69 8d       	ldd	r22, Y+25	; 0x19
    1c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9c 8b       	std	Y+20, r25	; 0x14
    1cbc:	8b 8b       	std	Y+19, r24	; 0x13
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <H_LCD_void_Init+0x542>
    1cc0:	88 ec       	ldi	r24, 0xC8	; 200
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9a 8b       	std	Y+18, r25	; 0x12
    1cc6:	89 8b       	std	Y+17, r24	; 0x11
    1cc8:	89 89       	ldd	r24, Y+17	; 0x11
    1cca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <H_LCD_void_Init+0x530>
    1cd0:	9a 8b       	std	Y+18, r25	; 0x12
    1cd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <H_LCD_void_Init+0x524>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <H_LCD_void_Init+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cea:	7e 89       	ldd	r23, Y+22	; 0x16
    1cec:	8f 89       	ldd	r24, Y+23	; 0x17
    1cee:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9c 8b       	std	Y+20, r25	; 0x14
    1cfa:	8b 8b       	std	Y+19, r24	; 0x13
    1cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1d00:	98 8b       	std	Y+16, r25	; 0x10
    1d02:	8f 87       	std	Y+15, r24	; 0x0f
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	98 89       	ldd	r25, Y+16	; 0x10
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <H_LCD_void_Init+0x56c>
    1d0c:	98 8b       	std	Y+16, r25	; 0x10
    1d0e:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_void_SendCommand(CMD_ENTRY_MODE); _delay_ms(2);  /* Entry Mode Set */
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e4       	ldi	r27, 0x40	; 64
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <H_LCD_void_Init+0x5cc>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <H_LCD_void_Init+0x64a>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <H_LCD_void_Init+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <H_LCD_void_Init+0x62c>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <H_LCD_void_Init+0x61a>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <H_LCD_void_Init+0x60e>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <H_LCD_void_Init+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <H_LCD_void_Init+0x656>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
}
    1dfa:	cc 5a       	subi	r28, 0xAC	; 172
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <H_LCD_void_DispChar>:

void H_LCD_void_DispChar(u8 copy_u8_Data) {
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	e9 97       	sbiw	r28, 0x39	; 57
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_void_SetPinVal(RS_PORT, RS_PIN, PIN_HIGH_ID);/* Set RS to HIGH */
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetPinVal(RW_PORT, RW_PIN, PIN_LOW_ID); /* Set R/W to LOW */
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	8d ab       	std	Y+53, r24	; 0x35
    1e50:	9e ab       	std	Y+54, r25	; 0x36
    1e52:	af ab       	std	Y+55, r26	; 0x37
    1e54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	6d a9       	ldd	r22, Y+53	; 0x35
    1e58:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a ef       	ldi	r20, 0xFA	; 250
    1e64:	54 e4       	ldi	r21, 0x44	; 68
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	89 ab       	std	Y+49, r24	; 0x31
    1e70:	9a ab       	std	Y+50, r25	; 0x32
    1e72:	ab ab       	std	Y+51, r26	; 0x33
    1e74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e76:	69 a9       	ldd	r22, Y+49	; 0x31
    1e78:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <H_LCD_void_DispChar+0x86>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <H_LCD_void_DispChar+0x104>
	else if (__tmp > 65535)
    1e98:	69 a9       	ldd	r22, Y+49	; 0x31
    1e9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <H_LCD_void_DispChar+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	6d a9       	ldd	r22, Y+53	; 0x35
    1eb2:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1eb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	98 ab       	std	Y+48, r25	; 0x30
    1ed6:	8f a7       	std	Y+47, r24	; 0x2f
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <H_LCD_void_DispChar+0xe6>
    1eda:	88 ec       	ldi	r24, 0xC8	; 200
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9e a7       	std	Y+46, r25	; 0x2e
    1ee0:	8d a7       	std	Y+45, r24	; 0x2d
    1ee2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ee4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <H_LCD_void_DispChar+0xd4>
    1eea:	9e a7       	std	Y+46, r25	; 0x2e
    1eec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	98 ab       	std	Y+48, r25	; 0x30
    1ef6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efa:	98 a9       	ldd	r25, Y+48	; 0x30
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <H_LCD_void_DispChar+0xc8>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <H_LCD_void_DispChar+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	69 a9       	ldd	r22, Y+49	; 0x31
    1f04:	7a a9       	ldd	r23, Y+50	; 0x32
    1f06:	8b a9       	ldd	r24, Y+51	; 0x33
    1f08:	9c a9       	ldd	r25, Y+52	; 0x34
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	98 ab       	std	Y+48, r25	; 0x30
    1f14:	8f a7       	std	Y+47, r24	; 0x2f
    1f16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f18:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1a:	9c a7       	std	Y+44, r25	; 0x2c
    1f1c:	8b a7       	std	Y+43, r24	; 0x2b
    1f1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f20:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <H_LCD_void_DispChar+0x110>
    1f26:	9c a7       	std	Y+44, r25	; 0x2c
    1f28:	8b a7       	std	Y+43, r24	; 0x2b
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
	_delay_ms(1);  /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
	M_DIO_void_SetLowerNibbleVal(LCD_DATA_PORT, (copy_u8_Data & 0x0F));
#elif (DATA_PORT_NIBBLE == UPPER)
	M_DIO_void_SetUpperNibbleVal(LCD_DATA_PORT, (copy_u8_Data & 0xF0) >> 0x04);
    1f2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2c:	98 2f       	mov	r25, r24
    1f2e:	92 95       	swap	r25
    1f30:	9f 70       	andi	r25, 0x0F	; 15
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	69 2f       	mov	r22, r25
    1f36:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_DIO_void_SetUpperNibbleVal>
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	62 e0       	ldi	r22, 0x02	; 2
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	8f a3       	std	Y+39, r24	; 0x27
    1f4e:	98 a7       	std	Y+40, r25	; 0x28
    1f50:	a9 a7       	std	Y+41, r26	; 0x29
    1f52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6f a1       	ldd	r22, Y+39	; 0x27
    1f56:	78 a5       	ldd	r23, Y+40	; 0x28
    1f58:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8b a3       	std	Y+35, r24	; 0x23
    1f6e:	9c a3       	std	Y+36, r25	; 0x24
    1f70:	ad a3       	std	Y+37, r26	; 0x25
    1f72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f74:	6b a1       	ldd	r22, Y+35	; 0x23
    1f76:	7c a1       	ldd	r23, Y+36	; 0x24
    1f78:	8d a1       	ldd	r24, Y+37	; 0x25
    1f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <H_LCD_void_DispChar+0x184>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9a a3       	std	Y+34, r25	; 0x22
    1f92:	89 a3       	std	Y+33, r24	; 0x21
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <H_LCD_void_DispChar+0x202>
	else if (__tmp > 65535)
    1f96:	6b a1       	ldd	r22, Y+35	; 0x23
    1f98:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <H_LCD_void_DispChar+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9a a3       	std	Y+34, r25	; 0x22
    1fd4:	89 a3       	std	Y+33, r24	; 0x21
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <H_LCD_void_DispChar+0x1e4>
    1fd8:	88 ec       	ldi	r24, 0xC8	; 200
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	98 a3       	std	Y+32, r25	; 0x20
    1fde:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe2:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <H_LCD_void_DispChar+0x1d2>
    1fe8:	98 a3       	std	Y+32, r25	; 0x20
    1fea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	89 a1       	ldd	r24, Y+33	; 0x21
    1fee:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <H_LCD_void_DispChar+0x1c6>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <H_LCD_void_DispChar+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6b a1       	ldd	r22, Y+35	; 0x23
    2002:	7c a1       	ldd	r23, Y+36	; 0x24
    2004:	8d a1       	ldd	r24, Y+37	; 0x25
    2006:	9e a1       	ldd	r25, Y+38	; 0x26
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9a a3       	std	Y+34, r25	; 0x22
    2012:	89 a3       	std	Y+33, r24	; 0x21
    2014:	89 a1       	ldd	r24, Y+33	; 0x21
    2016:	9a a1       	ldd	r25, Y+34	; 0x22
    2018:	9e 8f       	std	Y+30, r25	; 0x1e
    201a:	8d 8f       	std	Y+29, r24	; 0x1d
    201c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <H_LCD_void_DispChar+0x20e>
    2024:	9e 8f       	std	Y+30, r25	; 0x1e
    2026:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	62 e0       	ldi	r22, 0x02	; 2
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetUpperNibbleVal(LCD_DATA_PORT, (copy_u8_Data & 0x0F));
    2032:	89 ad       	ldd	r24, Y+57	; 0x39
    2034:	98 2f       	mov	r25, r24
    2036:	9f 70       	andi	r25, 0x0F	; 15
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	69 2f       	mov	r22, r25
    203c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_DIO_void_SetUpperNibbleVal>
#endif
#endif
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	89 8f       	std	Y+25, r24	; 0x19
    2054:	9a 8f       	std	Y+26, r25	; 0x1a
    2056:	ab 8f       	std	Y+27, r26	; 0x1b
    2058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	69 8d       	ldd	r22, Y+25	; 0x19
    205c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    205e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8d 8b       	std	Y+21, r24	; 0x15
    2074:	9e 8b       	std	Y+22, r25	; 0x16
    2076:	af 8b       	std	Y+23, r26	; 0x17
    2078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <H_LCD_void_DispChar+0x28a>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	3f c0       	rjmp	.+126    	; 0x211a <H_LCD_void_DispChar+0x308>
	else if (__tmp > 65535)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <H_LCD_void_DispChar+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	69 8d       	ldd	r22, Y+25	; 0x19
    20b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9c 8b       	std	Y+20, r25	; 0x14
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <H_LCD_void_DispChar+0x2ea>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9a 8b       	std	Y+18, r25	; 0x12
    20e4:	89 8b       	std	Y+17, r24	; 0x11
    20e6:	89 89       	ldd	r24, Y+17	; 0x11
    20e8:	9a 89       	ldd	r25, Y+18	; 0x12
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <H_LCD_void_DispChar+0x2d8>
    20ee:	9a 8b       	std	Y+18, r25	; 0x12
    20f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9c 8b       	std	Y+20, r25	; 0x14
    20fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <H_LCD_void_DispChar+0x2cc>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <H_LCD_void_DispChar+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9c 8b       	std	Y+20, r25	; 0x14
    2118:	8b 8b       	std	Y+19, r24	; 0x13
    211a:	8b 89       	ldd	r24, Y+19	; 0x13
    211c:	9c 89       	ldd	r25, Y+20	; 0x14
    211e:	98 8b       	std	Y+16, r25	; 0x10
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	98 89       	ldd	r25, Y+16	; 0x10
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <H_LCD_void_DispChar+0x314>
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID); /* Set E to LOW */
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	a0 e2       	ldi	r26, 0x20	; 32
    213e:	b1 e4       	ldi	r27, 0x41	; 65
    2140:	8b 87       	std	Y+11, r24	; 0x0b
    2142:	9c 87       	std	Y+12, r25	; 0x0c
    2144:	ad 87       	std	Y+13, r26	; 0x0d
    2146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2148:	6b 85       	ldd	r22, Y+11	; 0x0b
    214a:	7c 85       	ldd	r23, Y+12	; 0x0c
    214c:	8d 85       	ldd	r24, Y+13	; 0x0d
    214e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a ef       	ldi	r20, 0xFA	; 250
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	8f 83       	std	Y+7, r24	; 0x07
    2162:	98 87       	std	Y+8, r25	; 0x08
    2164:	a9 87       	std	Y+9, r26	; 0x09
    2166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e8       	ldi	r20, 0x80	; 128
    2176:	5f e3       	ldi	r21, 0x3F	; 63
    2178:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217c:	88 23       	and	r24, r24
    217e:	2c f4       	brge	.+10     	; 0x218a <H_LCD_void_DispChar+0x378>
		__ticks = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	3f c0       	rjmp	.+126    	; 0x2208 <H_LCD_void_DispChar+0x3f6>
	else if (__tmp > 65535)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	4c f5       	brge	.+82     	; 0x21f4 <H_LCD_void_DispChar+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e2       	ldi	r20, 0x20	; 32
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <H_LCD_void_DispChar+0x3d8>
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <H_LCD_void_DispChar+0x3c6>
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	69 f7       	brne	.-38     	; 0x21cc <H_LCD_void_DispChar+0x3ba>
    21f2:	14 c0       	rjmp	.+40     	; 0x221c <H_LCD_void_DispChar+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	9a 83       	std	Y+2, r25	; 0x02
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	9a 81       	ldd	r25, Y+2	; 0x02
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <H_LCD_void_DispChar+0x402>
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); /* Delay for 10ms to let the LCD execute command */
}
    221c:	e9 96       	adiw	r28, 0x39	; 57
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <H_LCD_void_DispStr>:

void H_LCD_void_DispStr (u8* copy_Pu8_String) {
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <H_LCD_void_DispStr+0x6>
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9b 83       	std	Y+3, r25	; 0x03
    223c:	8a 83       	std	Y+2, r24	; 0x02
	/* Local loop index */
	u8 u8Index = 0;
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	0e c0       	rjmp	.+28     	; 0x225e <H_LCD_void_DispStr+0x30>
	while (copy_Pu8_String[u8Index] != '\0') {
		/* Write Character on LCD */
		H_LCD_void_DispChar(copy_Pu8_String[u8Index]);
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	80 81       	ld	r24, Z
    2254:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
		/* Increment local loop index */
		u8Index++;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	8f 5f       	subi	r24, 0xFF	; 255
    225c:	89 83       	std	Y+1, r24	; 0x01
}

void H_LCD_void_DispStr (u8* copy_Pu8_String) {
	/* Local loop index */
	u8 u8Index = 0;
	while (copy_Pu8_String[u8Index] != '\0') {
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	fc 01       	movw	r30, r24
    226a:	e2 0f       	add	r30, r18
    226c:	f3 1f       	adc	r31, r19
    226e:	80 81       	ld	r24, Z
    2270:	88 23       	and	r24, r24
    2272:	39 f7       	brne	.-50     	; 0x2242 <H_LCD_void_DispStr+0x14>
		/* Write Character on LCD */
		H_LCD_void_DispChar(copy_Pu8_String[u8Index]);
		/* Increment local loop index */
		u8Index++;
	}
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <H_LCD_void_ClearScreen>:

void H_LCD_void_ClearScreen (){
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(CMD_CLEAR);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
}
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <H_LCD_void_GoToRowCol>:

void H_LCD_void_GoToRowCol (u8 copy_u8_RawId, u8 copy_u8_ColId) {
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	00 d0       	rcall	.+0      	; 0x229a <H_LCD_void_GoToRowCol+0x6>
    229a:	00 d0       	rcall	.+0      	; 0x229c <H_LCD_void_GoToRowCol+0x8>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8_Address;
	switch(copy_u8_RawId) {
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	3d 83       	std	Y+5, r19	; 0x05
    22ae:	2c 83       	std	Y+4, r18	; 0x04
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <H_LCD_void_GoToRowCol+0x30>
    22b8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ba:	3d 81       	ldd	r19, Y+5	; 0x05
    22bc:	21 30       	cpi	r18, 0x01	; 1
    22be:	31 05       	cpc	r19, r1
    22c0:	21 f0       	breq	.+8      	; 0x22ca <H_LCD_void_GoToRowCol+0x36>
    22c2:	06 c0       	rjmp	.+12     	; 0x22d0 <H_LCD_void_GoToRowCol+0x3c>
		case 0:
			local_u8_Address = copy_u8_ColId;
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <H_LCD_void_GoToRowCol+0x3c>
			break;
		case 1:
			local_u8_Address = copy_u8_ColId + 0x40;
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	80 5c       	subi	r24, 0xC0	; 192
    22ce:	89 83       	std	Y+1, r24	; 0x01
			break;
		default: /* Wrong Row ID */ break;
	}
	H_LCD_void_SendCommand(local_u8_Address | CMD_CURSOR_OFFSET);
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	80 68       	ori	r24, 0x80	; 128
    22d4:	0e 94 33 12 	call	0x2466	; 0x2466 <H_LCD_void_SendCommand>
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <H_LCD_void_DispNum>:

void H_LCD_void_DispNum (u32 copy_u32_Number) {
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	a4 97       	sbiw	r28, 0x24	; 36
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	69 a3       	std	Y+33, r22	; 0x21
    22fe:	7a a3       	std	Y+34, r23	; 0x22
    2300:	8b a3       	std	Y+35, r24	; 0x23
    2302:	9c a3       	std	Y+36, r25	; 0x24
	s8 * local_Pu8_str[16] = {0};
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	fe 01       	movw	r30, r28
    2308:	31 96       	adiw	r30, 0x01	; 1
    230a:	df 01       	movw	r26, r30
    230c:	98 2f       	mov	r25, r24
    230e:	1d 92       	st	X+, r1
    2310:	9a 95       	dec	r25
    2312:	e9 f7       	brne	.-6      	; 0x230e <H_LCD_void_DispNum+0x26>
	/* ToDo: Replaced with user defined function in the LIB layer in StrManip Module */
	ltoa(copy_u32_Number, (s8 *)&local_Pu8_str, 10);
    2314:	89 a1       	ldd	r24, Y+33	; 0x21
    2316:	9a a1       	ldd	r25, Y+34	; 0x22
    2318:	ab a1       	ldd	r26, Y+35	; 0x23
    231a:	bc a1       	ldd	r27, Y+36	; 0x24
    231c:	9e 01       	movw	r18, r28
    231e:	2f 5f       	subi	r18, 0xFF	; 255
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	a9 01       	movw	r20, r18
    2328:	2a e0       	ldi	r18, 0x0A	; 10
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <ltoa>
	H_LCD_void_DispStr((u8 *)local_Pu8_str);
    2330:	ce 01       	movw	r24, r28
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	0e 94 17 11 	call	0x222e	; 0x222e <H_LCD_void_DispStr>


}
    2338:	a4 96       	adiw	r28, 0x24	; 36
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <LCD_voidSendNumber>:




void LCD_voidSendNumber		(u32  Copy_u32Number)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	28 97       	sbiw	r28, 0x08	; 8
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	6d 83       	std	Y+5, r22	; 0x05
    2360:	7e 83       	std	Y+6, r23	; 0x06
    2362:	8f 83       	std	Y+7, r24	; 0x07
    2364:	98 87       	std	Y+8, r25	; 0x08

	u32 Local_u16NumRange = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a0 e0       	ldi	r26, 0x00	; 0
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	ab 83       	std	Y+3, r26	; 0x03
    2374:	bc 83       	std	Y+4, r27	; 0x04

		if(Copy_u32Number == 0)
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	af 81       	ldd	r26, Y+7	; 0x07
    237c:	b8 85       	ldd	r27, Y+8	; 0x08
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	a1 05       	cpc	r26, r1
    2382:	b1 05       	cpc	r27, r1
    2384:	b1 f4       	brne	.+44     	; 0x23b2 <LCD_voidSendNumber+0x68>
		{
			H_LCD_void_DispChar('0');
    2386:	80 e3       	ldi	r24, 0x30	; 48
    2388:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
    238c:	63 c0       	rjmp	.+198    	; 0x2454 <LCD_voidSendNumber+0x10a>
		}
		else
		{
			while((Copy_u32Number/Local_u16NumRange) != 0)
			{
				Local_u16NumRange *= 10;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	ab 81       	ldd	r26, Y+3	; 0x03
    2394:	bc 81       	ldd	r27, Y+4	; 0x04
    2396:	2a e0       	ldi	r18, 0x0A	; 10
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <__mulsi3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	ab 83       	std	Y+3, r26	; 0x03
    23b0:	bc 83       	std	Y+4, r27	; 0x04
		{
			H_LCD_void_DispChar('0');
		}
		else
		{
			while((Copy_u32Number/Local_u16NumRange) != 0)
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	af 81       	ldd	r26, Y+7	; 0x07
    23b8:	b8 85       	ldd	r27, Y+8	; 0x08
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	4b 81       	ldd	r20, Y+3	; 0x03
    23c0:	5c 81       	ldd	r21, Y+4	; 0x04
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	a1 05       	cpc	r26, r1
    23d2:	b1 05       	cpc	r27, r1
    23d4:	e1 f6       	brne	.-72     	; 0x238e <LCD_voidSendNumber+0x44>
    23d6:	35 c0       	rjmp	.+106    	; 0x2442 <LCD_voidSendNumber+0xf8>
				Local_u16NumRange *= 10;
			}

			while(Local_u16NumRange != 1)
			{
				Local_u16NumRange /= 10;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	9a 81       	ldd	r25, Y+2	; 0x02
    23dc:	ab 81       	ldd	r26, Y+3	; 0x03
    23de:	bc 81       	ldd	r27, Y+4	; 0x04
    23e0:	2a e0       	ldi	r18, 0x0A	; 10
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
    23f0:	da 01       	movw	r26, r20
    23f2:	c9 01       	movw	r24, r18
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	ab 83       	std	Y+3, r26	; 0x03
    23fa:	bc 83       	std	Y+4, r27	; 0x04
				H_LCD_void_DispChar((Copy_u32Number/Local_u16NumRange) + 48) ;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	af 81       	ldd	r26, Y+7	; 0x07
    2402:	b8 85       	ldd	r27, Y+8	; 0x08
    2404:	29 81       	ldd	r18, Y+1	; 0x01
    2406:	3a 81       	ldd	r19, Y+2	; 0x02
    2408:	4b 81       	ldd	r20, Y+3	; 0x03
    240a:	5c 81       	ldd	r21, Y+4	; 0x04
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
    2414:	da 01       	movw	r26, r20
    2416:	c9 01       	movw	r24, r18
    2418:	80 5d       	subi	r24, 0xD0	; 208
    241a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
			//	LCD_voidSendChar((Copy_u32Number/Local_u16NumRange) + 48 );
				Copy_u32Number %= Local_u16NumRange;
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	af 81       	ldd	r26, Y+7	; 0x07
    2424:	b8 85       	ldd	r27, Y+8	; 0x08
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	3a 81       	ldd	r19, Y+2	; 0x02
    242a:	4b 81       	ldd	r20, Y+3	; 0x03
    242c:	5c 81       	ldd	r21, Y+4	; 0x04
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	af 83       	std	Y+7, r26	; 0x07
    2440:	b8 87       	std	Y+8, r27	; 0x08
			while((Copy_u32Number/Local_u16NumRange) != 0)
			{
				Local_u16NumRange *= 10;
			}

			while(Local_u16NumRange != 1)
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	ab 81       	ldd	r26, Y+3	; 0x03
    2448:	bc 81       	ldd	r27, Y+4	; 0x04
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	91 05       	cpc	r25, r1
    244e:	a1 05       	cpc	r26, r1
    2450:	b1 05       	cpc	r27, r1
    2452:	11 f6       	brne	.-124    	; 0x23d8 <LCD_voidSendNumber+0x8e>
			//	LCD_voidSendChar((Copy_u32Number/Local_u16NumRange) + 48 );
				Copy_u32Number %= Local_u16NumRange;
			}
		}

}
    2454:	28 96       	adiw	r28, 0x08	; 8
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <H_LCD_void_SendCommand>:


/*************************************************************************************
 *                           Defining Static Functions                               *
 *************************************************************************************/
 void H_LCD_void_SendCommand(u8 copy_u8_CmdID) {
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	e9 97       	sbiw	r28, 0x39	; 57
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_void_SetPinVal(RS_PORT, RS_PIN, PIN_LOW_ID); /* Set RS to LOW */
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetPinVal(RW_PORT, RW_PIN, PIN_LOW_ID); /* Set R/W to LOW */
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	62 e0       	ldi	r22, 0x02	; 2
    2494:	41 e0       	ldi	r20, 0x01	; 1
    2496:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	a0 e8       	ldi	r26, 0x80	; 128
    24a0:	bf e3       	ldi	r27, 0x3F	; 63
    24a2:	8d ab       	std	Y+53, r24	; 0x35
    24a4:	9e ab       	std	Y+54, r25	; 0x36
    24a6:	af ab       	std	Y+55, r26	; 0x37
    24a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6d a9       	ldd	r22, Y+53	; 0x35
    24ac:	7e a9       	ldd	r23, Y+54	; 0x36
    24ae:	8f a9       	ldd	r24, Y+55	; 0x37
    24b0:	98 ad       	ldd	r25, Y+56	; 0x38
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	89 ab       	std	Y+49, r24	; 0x31
    24c4:	9a ab       	std	Y+50, r25	; 0x32
    24c6:	ab ab       	std	Y+51, r26	; 0x33
    24c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ca:	69 a9       	ldd	r22, Y+49	; 0x31
    24cc:	7a a9       	ldd	r23, Y+50	; 0x32
    24ce:	8b a9       	ldd	r24, Y+51	; 0x33
    24d0:	9c a9       	ldd	r25, Y+52	; 0x34
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <H_LCD_void_SendCommand+0x86>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <H_LCD_void_SendCommand+0x104>
	else if (__tmp > 65535)
    24ec:	69 a9       	ldd	r22, Y+49	; 0x31
    24ee:	7a a9       	ldd	r23, Y+50	; 0x32
    24f0:	8b a9       	ldd	r24, Y+51	; 0x33
    24f2:	9c a9       	ldd	r25, Y+52	; 0x34
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <H_LCD_void_SendCommand+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6d a9       	ldd	r22, Y+53	; 0x35
    2506:	7e a9       	ldd	r23, Y+54	; 0x36
    2508:	8f a9       	ldd	r24, Y+55	; 0x37
    250a:	98 ad       	ldd	r25, Y+56	; 0x38
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	98 ab       	std	Y+48, r25	; 0x30
    252a:	8f a7       	std	Y+47, r24	; 0x2f
    252c:	0f c0       	rjmp	.+30     	; 0x254c <H_LCD_void_SendCommand+0xe6>
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9e a7       	std	Y+46, r25	; 0x2e
    2534:	8d a7       	std	Y+45, r24	; 0x2d
    2536:	8d a5       	ldd	r24, Y+45	; 0x2d
    2538:	9e a5       	ldd	r25, Y+46	; 0x2e
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <H_LCD_void_SendCommand+0xd4>
    253e:	9e a7       	std	Y+46, r25	; 0x2e
    2540:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8f a5       	ldd	r24, Y+47	; 0x2f
    2544:	98 a9       	ldd	r25, Y+48	; 0x30
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	98 ab       	std	Y+48, r25	; 0x30
    254a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8f a5       	ldd	r24, Y+47	; 0x2f
    254e:	98 a9       	ldd	r25, Y+48	; 0x30
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <H_LCD_void_SendCommand+0xc8>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <H_LCD_void_SendCommand+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	69 a9       	ldd	r22, Y+49	; 0x31
    2558:	7a a9       	ldd	r23, Y+50	; 0x32
    255a:	8b a9       	ldd	r24, Y+51	; 0x33
    255c:	9c a9       	ldd	r25, Y+52	; 0x34
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	98 ab       	std	Y+48, r25	; 0x30
    2568:	8f a7       	std	Y+47, r24	; 0x2f
    256a:	8f a5       	ldd	r24, Y+47	; 0x2f
    256c:	98 a9       	ldd	r25, Y+48	; 0x30
    256e:	9c a7       	std	Y+44, r25	; 0x2c
    2570:	8b a7       	std	Y+43, r24	; 0x2b
    2572:	8b a5       	ldd	r24, Y+43	; 0x2b
    2574:	9c a5       	ldd	r25, Y+44	; 0x2c
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <H_LCD_void_SendCommand+0x110>
    257a:	9c a7       	std	Y+44, r25	; 0x2c
    257c:	8b a7       	std	Y+43, r24	; 0x2b
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
	_delay_ms(1);  /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
	M_DIO_void_SetLowerNibbleVal(LCD_DATA_PORT, (copy_u8_CmdID & 0x0F));
#elif (DATA_PORT_NIBBLE == UPPER)
	M_DIO_void_SetUpperNibbleVal(LCD_DATA_PORT, ((copy_u8_CmdID & 0xF0) >> 0x04));
    257e:	89 ad       	ldd	r24, Y+57	; 0x39
    2580:	98 2f       	mov	r25, r24
    2582:	92 95       	swap	r25
    2584:	9f 70       	andi	r25, 0x0F	; 15
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	69 2f       	mov	r22, r25
    258a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_DIO_void_SetUpperNibbleVal>
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	62 e0       	ldi	r22, 0x02	; 2
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	a0 e8       	ldi	r26, 0x80	; 128
    259e:	bf e3       	ldi	r27, 0x3F	; 63
    25a0:	8f a3       	std	Y+39, r24	; 0x27
    25a2:	98 a7       	std	Y+40, r25	; 0x28
    25a4:	a9 a7       	std	Y+41, r26	; 0x29
    25a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a8:	6f a1       	ldd	r22, Y+39	; 0x27
    25aa:	78 a5       	ldd	r23, Y+40	; 0x28
    25ac:	89 a5       	ldd	r24, Y+41	; 0x29
    25ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4a ef       	ldi	r20, 0xFA	; 250
    25b6:	54 e4       	ldi	r21, 0x44	; 68
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	8b a3       	std	Y+35, r24	; 0x23
    25c2:	9c a3       	std	Y+36, r25	; 0x24
    25c4:	ad a3       	std	Y+37, r26	; 0x25
    25c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e8       	ldi	r20, 0x80	; 128
    25d6:	5f e3       	ldi	r21, 0x3F	; 63
    25d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25dc:	88 23       	and	r24, r24
    25de:	2c f4       	brge	.+10     	; 0x25ea <H_LCD_void_SendCommand+0x184>
		__ticks = 1;
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9a a3       	std	Y+34, r25	; 0x22
    25e6:	89 a3       	std	Y+33, r24	; 0x21
    25e8:	3f c0       	rjmp	.+126    	; 0x2668 <H_LCD_void_SendCommand+0x202>
	else if (__tmp > 65535)
    25ea:	6b a1       	ldd	r22, Y+35	; 0x23
    25ec:	7c a1       	ldd	r23, Y+36	; 0x24
    25ee:	8d a1       	ldd	r24, Y+37	; 0x25
    25f0:	9e a1       	ldd	r25, Y+38	; 0x26
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	4c f5       	brge	.+82     	; 0x2654 <H_LCD_void_SendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	6f a1       	ldd	r22, Y+39	; 0x27
    2604:	78 a5       	ldd	r23, Y+40	; 0x28
    2606:	89 a5       	ldd	r24, Y+41	; 0x29
    2608:	9a a5       	ldd	r25, Y+42	; 0x2a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e2       	ldi	r20, 0x20	; 32
    2610:	51 e4       	ldi	r21, 0x41	; 65
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	bc 01       	movw	r22, r24
    261c:	cd 01       	movw	r24, r26
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	9a a3       	std	Y+34, r25	; 0x22
    2628:	89 a3       	std	Y+33, r24	; 0x21
    262a:	0f c0       	rjmp	.+30     	; 0x264a <H_LCD_void_SendCommand+0x1e4>
    262c:	88 ec       	ldi	r24, 0xC8	; 200
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	98 a3       	std	Y+32, r25	; 0x20
    2632:	8f 8f       	std	Y+31, r24	; 0x1f
    2634:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2636:	98 a1       	ldd	r25, Y+32	; 0x20
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <H_LCD_void_SendCommand+0x1d2>
    263c:	98 a3       	std	Y+32, r25	; 0x20
    263e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2640:	89 a1       	ldd	r24, Y+33	; 0x21
    2642:	9a a1       	ldd	r25, Y+34	; 0x22
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	9a a3       	std	Y+34, r25	; 0x22
    2648:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	89 a1       	ldd	r24, Y+33	; 0x21
    264c:	9a a1       	ldd	r25, Y+34	; 0x22
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	69 f7       	brne	.-38     	; 0x262c <H_LCD_void_SendCommand+0x1c6>
    2652:	14 c0       	rjmp	.+40     	; 0x267c <H_LCD_void_SendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	6b a1       	ldd	r22, Y+35	; 0x23
    2656:	7c a1       	ldd	r23, Y+36	; 0x24
    2658:	8d a1       	ldd	r24, Y+37	; 0x25
    265a:	9e a1       	ldd	r25, Y+38	; 0x26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9a a3       	std	Y+34, r25	; 0x22
    2666:	89 a3       	std	Y+33, r24	; 0x21
    2668:	89 a1       	ldd	r24, Y+33	; 0x21
    266a:	9a a1       	ldd	r25, Y+34	; 0x22
    266c:	9e 8f       	std	Y+30, r25	; 0x1e
    266e:	8d 8f       	std	Y+29, r24	; 0x1d
    2670:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2672:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	f1 f7       	brne	.-4      	; 0x2674 <H_LCD_void_SendCommand+0x20e>
    2678:	9e 8f       	std	Y+30, r25	; 0x1e
    267a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID);/* Set E to HIGH  */
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
	M_DIO_void_SetUpperNibbleVal(LCD_DATA_PORT, (copy_u8_CmdID & 0x0F));
    2686:	89 ad       	ldd	r24, Y+57	; 0x39
    2688:	98 2f       	mov	r25, r24
    268a:	9f 70       	andi	r25, 0x0F	; 15
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	69 2f       	mov	r22, r25
    2690:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_DIO_void_SetUpperNibbleVal>
#endif
#endif
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_LOW_ID); /* Set E to LOW */
    2694:	83 e0       	ldi	r24, 0x03	; 3
    2696:	62 e0       	ldi	r22, 0x02	; 2
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e8       	ldi	r26, 0x80	; 128
    26a4:	bf e3       	ldi	r27, 0x3F	; 63
    26a6:	89 8f       	std	Y+25, r24	; 0x19
    26a8:	9a 8f       	std	Y+26, r25	; 0x1a
    26aa:	ab 8f       	std	Y+27, r26	; 0x1b
    26ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ae:	69 8d       	ldd	r22, Y+25	; 0x19
    26b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4a ef       	ldi	r20, 0xFA	; 250
    26bc:	54 e4       	ldi	r21, 0x44	; 68
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	8d 8b       	std	Y+21, r24	; 0x15
    26c8:	9e 8b       	std	Y+22, r25	; 0x16
    26ca:	af 8b       	std	Y+23, r26	; 0x17
    26cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e8       	ldi	r20, 0x80	; 128
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e2:	88 23       	and	r24, r24
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <H_LCD_void_SendCommand+0x28a>
		__ticks = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
    26ee:	3f c0       	rjmp	.+126    	; 0x276e <H_LCD_void_SendCommand+0x308>
	else if (__tmp > 65535)
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	4c f5       	brge	.+82     	; 0x275a <H_LCD_void_SendCommand+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	69 8d       	ldd	r22, Y+25	; 0x19
    270a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e2       	ldi	r20, 0x20	; 32
    2716:	51 e4       	ldi	r21, 0x41	; 65
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9c 8b       	std	Y+20, r25	; 0x14
    272e:	8b 8b       	std	Y+19, r24	; 0x13
    2730:	0f c0       	rjmp	.+30     	; 0x2750 <H_LCD_void_SendCommand+0x2ea>
    2732:	88 ec       	ldi	r24, 0xC8	; 200
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9a 8b       	std	Y+18, r25	; 0x12
    2738:	89 8b       	std	Y+17, r24	; 0x11
    273a:	89 89       	ldd	r24, Y+17	; 0x11
    273c:	9a 89       	ldd	r25, Y+18	; 0x12
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <H_LCD_void_SendCommand+0x2d8>
    2742:	9a 8b       	std	Y+18, r25	; 0x12
    2744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	9c 8b       	std	Y+20, r25	; 0x14
    274e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2750:	8b 89       	ldd	r24, Y+19	; 0x13
    2752:	9c 89       	ldd	r25, Y+20	; 0x14
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	69 f7       	brne	.-38     	; 0x2732 <H_LCD_void_SendCommand+0x2cc>
    2758:	14 c0       	rjmp	.+40     	; 0x2782 <H_LCD_void_SendCommand+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	6d 89       	ldd	r22, Y+21	; 0x15
    275c:	7e 89       	ldd	r23, Y+22	; 0x16
    275e:	8f 89       	ldd	r24, Y+23	; 0x17
    2760:	98 8d       	ldd	r25, Y+24	; 0x18
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	9c 8b       	std	Y+20, r25	; 0x14
    276c:	8b 8b       	std	Y+19, r24	; 0x13
    276e:	8b 89       	ldd	r24, Y+19	; 0x13
    2770:	9c 89       	ldd	r25, Y+20	; 0x14
    2772:	98 8b       	std	Y+16, r25	; 0x10
    2774:	8f 87       	std	Y+15, r24	; 0x0f
    2776:	8f 85       	ldd	r24, Y+15	; 0x0f
    2778:	98 89       	ldd	r25, Y+16	; 0x10
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	f1 f7       	brne	.-4      	; 0x277a <H_LCD_void_SendCommand+0x314>
    277e:	98 8b       	std	Y+16, r25	; 0x10
    2780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Wait for E to settle */
	M_DIO_void_SetPinVal(EN_PORT, EN_PIN, PIN_HIGH_ID); /* Set E to LOW */
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	62 e0       	ldi	r22, 0x02	; 2
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e2       	ldi	r26, 0x20	; 32
    2792:	b1 e4       	ldi	r27, 0x41	; 65
    2794:	8b 87       	std	Y+11, r24	; 0x0b
    2796:	9c 87       	std	Y+12, r25	; 0x0c
    2798:	ad 87       	std	Y+13, r26	; 0x0d
    279a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279c:	6b 85       	ldd	r22, Y+11	; 0x0b
    279e:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4a ef       	ldi	r20, 0xFA	; 250
    27aa:	54 e4       	ldi	r21, 0x44	; 68
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8f 83       	std	Y+7, r24	; 0x07
    27b6:	98 87       	std	Y+8, r25	; 0x08
    27b8:	a9 87       	std	Y+9, r26	; 0x09
    27ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e8       	ldi	r20, 0x80	; 128
    27ca:	5f e3       	ldi	r21, 0x3F	; 63
    27cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <H_LCD_void_SendCommand+0x378>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <H_LCD_void_SendCommand+0x3f6>
	else if (__tmp > 65535)
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	3f ef       	ldi	r19, 0xFF	; 255
    27ea:	4f e7       	ldi	r20, 0x7F	; 127
    27ec:	57 e4       	ldi	r21, 0x47	; 71
    27ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	4c f5       	brge	.+82     	; 0x2848 <H_LCD_void_SendCommand+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9e 83       	std	Y+6, r25	; 0x06
    281c:	8d 83       	std	Y+5, r24	; 0x05
    281e:	0f c0       	rjmp	.+30     	; 0x283e <H_LCD_void_SendCommand+0x3d8>
    2820:	88 ec       	ldi	r24, 0xC8	; 200
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	9c 81       	ldd	r25, Y+4	; 0x04
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <H_LCD_void_SendCommand+0x3c6>
    2830:	9c 83       	std	Y+4, r25	; 0x04
    2832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	69 f7       	brne	.-38     	; 0x2820 <H_LCD_void_SendCommand+0x3ba>
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <H_LCD_void_SendCommand+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	6f 81       	ldd	r22, Y+7	; 0x07
    284a:	78 85       	ldd	r23, Y+8	; 0x08
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	9a 81       	ldd	r25, Y+2	; 0x02
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <H_LCD_void_SendCommand+0x402>
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); /* Delay for 10ms to let the LCD execute command */
}
    2870:	e9 96       	adiw	r28, 0x39	; 57
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <H_voidReadChannlLdr>:

#include "LDR.h"
u16 ADC_Value ;

u16 H_voidReadChannlLdr(void)
{
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
	ADC_Value=ADC_Read(0)/100;
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_Read>
    2890:	24 e6       	ldi	r18, 0x64	; 100
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	b9 01       	movw	r22, r18
    2896:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    289a:	cb 01       	movw	r24, r22
    289c:	90 93 a6 00 	sts	0x00A6, r25
    28a0:	80 93 a5 00 	sts	0x00A5, r24


	return ADC_Value ;
    28a4:	80 91 a5 00 	lds	r24, 0x00A5
    28a8:	90 91 a6 00 	lds	r25, 0x00A6
}
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <H_voidReadChannlLM35>:

#include "LM35.h"
u16 ADC_Value ;

u16 H_voidReadChannlLM35(void)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62

	ADC_Value=ADC_Read(1)/10;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_Read>
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	b9 01       	movw	r22, r18
    28c6:	0e 94 28 16 	call	0x2c50	; 0x2c50 <__udivmodhi4>
    28ca:	cb 01       	movw	r24, r22
    28cc:	90 93 a6 00 	sts	0x00A6, r25
    28d0:	80 93 a5 00 	sts	0x00A5, r24

	return ADC_Value ;
    28d4:	80 91 a5 00 	lds	r24, 0x00A5
    28d8:	90 91 a6 00 	lds	r25, 0x00A6
}
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <main>:
u16  x=0,y=0 ;

u8 key ,val=0 ;
u8 ARR[5]={7,4,7,4} , arr_copy[5];
int main(void)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	2f 97       	sbiw	r28, 0x0f	; 15
    28ec:	0f b6       	in	r0, 0x3f	; 63
    28ee:	f8 94       	cli
    28f0:	de bf       	out	0x3e, r29	; 62
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
    28f6:	0e 94 ce 0b 	call	0x179c	; 0x179c <H_LCD_void_Init>
	ADC_Init ();
    28fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>
	H_KPD_void_Init();
    28fe:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_KPD_void_Init>
	M_DIO_void_SetPinDir (PORTA_ID , PIN0_ID, PIN_INPUT_ID); //PIN LDR
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir (PORTA_ID , PIN1_ID, PIN_INPUT_ID); // PIN LM35
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir (PORTD_ID, PIN5_ID, PIN_OUTPUT_ID); // PIN SERVO
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	65 e0       	ldi	r22, 0x05	; 5
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir (PORTD_ID , PIN6_ID, PIN_OUTPUT_ID); // PIN MOTOR
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>
	M_DIO_void_SetPinDir (PORTD_ID , PIN7_ID, PIN_OUTPUT_ID); // PIN buz
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	67 e0       	ldi	r22, 0x07	; 7
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 31 06 	call	0xc62	; 0xc62 <M_DIO_void_SetPinDir>

	H_voidInitServo();
    2934:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <H_voidInitServo>
	         light=....    Tem= .....

	    if usr entr 0 will go to enter pass to opn door
	    if not enter will dispaly same scr
		 */
		H_LCD_void_GoToRowCol (1, 0);
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	60 e0       	ldi	r22, 0x00	; 0
    293c:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
		H_LCD_void_DispStr((u8*)"Light=");
    2940:	80 e6       	ldi	r24, 0x60	; 96
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 17 11 	call	0x222e	; 0x222e <H_LCD_void_DispStr>
		H_LCD_void_DispNum (H_voidReadChannlLdr());
    2948:	0e 94 41 14 	call	0x2882	; 0x2882 <H_voidReadChannlLdr>
    294c:	cc 01       	movw	r24, r24
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 74 11 	call	0x22e8	; 0x22e8 <H_LCD_void_DispNum>
		H_LCD_void_GoToRowCol (1, 10);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	6a e0       	ldi	r22, 0x0A	; 10
    295e:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
		H_LCD_void_DispStr((u8*)"Tem=");
    2962:	87 e6       	ldi	r24, 0x67	; 103
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 17 11 	call	0x222e	; 0x222e <H_LCD_void_DispStr>
		H_LCD_void_DispNum (H_voidReadChannlLM35());
    296a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <H_voidReadChannlLM35>
    296e:	cc 01       	movw	r24, r24
    2970:	a0 e0       	ldi	r26, 0x00	; 0
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 74 11 	call	0x22e8	; 0x22e8 <H_LCD_void_DispNum>
if(H_voidReadChannlLM35()>=40)
    297c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <H_voidReadChannlLM35>
    2980:	88 32       	cpi	r24, 0x28	; 40
    2982:	91 05       	cpc	r25, r1
    2984:	30 f0       	brcs	.+12     	; 0x2992 <main+0xb0>
{
	M_DIO_void_SetPinVal (PORTD_ID, PIN6_ID,PIN_HIGH_ID);
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	66 e0       	ldi	r22, 0x06	; 6
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
    2990:	05 c0       	rjmp	.+10     	; 0x299c <main+0xba>
	}
else {
	M_DIO_void_SetPinVal (PORTD_ID, PIN6_ID,PIN_LOW_ID);
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	66 e0       	ldi	r22, 0x06	; 6
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
}


		H_KPD_void_GetPressedKey(&key);
    299c:	8c ea       	ldi	r24, 0xAC	; 172
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <H_KPD_void_GetPressedKey>
		H_LCD_void_GoToRowCol (0,1);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	61 e0       	ldi	r22, 0x01	; 1
    29a8:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
		H_LCD_void_DispStr((u8*)"Enter 0");
    29ac:	8c e6       	ldi	r24, 0x6C	; 108
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	0e 94 17 11 	call	0x222e	; 0x222e <H_LCD_void_DispStr>
		if((key)!=255)
    29b4:	80 91 ac 00 	lds	r24, 0x00AC
    29b8:	8f 3f       	cpi	r24, 0xFF	; 255
    29ba:	09 f4       	brne	.+2      	; 0x29be <main+0xdc>
    29bc:	bd cf       	rjmp	.-134    	; 0x2938 <main+0x56>
		{
			//clear all csr
			// scnd step enter pass
			H_LCD_void_ClearScreen ();
    29be:	0e 94 40 11 	call	0x2280	; 0x2280 <H_LCD_void_ClearScreen>
			if((key)==0)
    29c2:	80 91 ac 00 	lds	r24, 0x00AC
    29c6:	88 23       	and	r24, r24
    29c8:	09 f0       	breq	.+2      	; 0x29cc <main+0xea>
    29ca:	b6 cf       	rjmp	.-148    	; 0x2938 <main+0x56>
			{
				//dispaly enter pass in first row
				H_LCD_void_GoToRowCol (0,1);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
				H_LCD_void_DispStr((u8*)"Enter Pass");
    29d4:	84 e7       	ldi	r24, 0x74	; 116
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 17 11 	call	0x222e	; 0x222e <H_LCD_void_DispStr>

				//dispaly the next to scnd row
				H_LCD_void_GoToRowCol (1,0);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
    29e4:	da c0       	rjmp	.+436    	; 0x2b9a <main+0x2b8>

				while(i<=4)   //will loop until user enter 4 num
				{

					H_KPD_void_GetPressedKey(&key);
    29e6:	8c ea       	ldi	r24, 0xAC	; 172
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <H_KPD_void_GetPressedKey>
					if((key)!=255)
    29ee:	80 91 ac 00 	lds	r24, 0x00AC
    29f2:	8f 3f       	cpi	r24, 0xFF	; 255
    29f4:	c1 f0       	breq	.+48     	; 0x2a26 <main+0x144>
					{
						//get pass
						H_LCD_void_DispChar (key+48);
    29f6:	80 91 ac 00 	lds	r24, 0x00AC
    29fa:	80 5d       	subi	r24, 0xD0	; 208
    29fc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
						//save pass
						arr_copy[i]=key;
    2a00:	80 91 9c 00 	lds	r24, 0x009C
    2a04:	90 91 9d 00 	lds	r25, 0x009D
    2a08:	20 91 ac 00 	lds	r18, 0x00AC
    2a0c:	fc 01       	movw	r30, r24
    2a0e:	e9 55       	subi	r30, 0x59	; 89
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	20 83       	st	Z, r18
						i++;
    2a14:	80 91 9c 00 	lds	r24, 0x009C
    2a18:	90 91 9d 00 	lds	r25, 0x009D
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	90 93 9d 00 	sts	0x009D, r25
    2a22:	80 93 9c 00 	sts	0x009C, r24
					}

					//pass 4 digt
					// if usr enter 4 numer will check
					if(i==4)
    2a26:	80 91 9c 00 	lds	r24, 0x009C
    2a2a:	90 91 9d 00 	lds	r25, 0x009D
    2a2e:	84 30       	cpi	r24, 0x04	; 4
    2a30:	91 05       	cpc	r25, r1
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <main+0x154>
    2a34:	b2 c0       	rjmp	.+356    	; 0x2b9a <main+0x2b8>
					{
						for(u8 m=0;m<4;m++)
    2a36:	1f 86       	std	Y+15, r1	; 0x0f
    2a38:	18 c0       	rjmp	.+48     	; 0x2a6a <main+0x188>
						{
							if(ARR[m]==arr_copy[m])
    2a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	fc 01       	movw	r30, r24
    2a42:	e9 57       	subi	r30, 0x79	; 121
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	20 81       	ld	r18, Z
    2a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e9 55       	subi	r30, 0x59	; 89
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	28 17       	cp	r18, r24
    2a58:	29 f4       	brne	.+10     	; 0x2a64 <main+0x182>
							{
								//if one digt right will incres
								val++ ;
    2a5a:	80 91 a2 00 	lds	r24, 0x00A2
    2a5e:	8f 5f       	subi	r24, 0xFF	; 255
    2a60:	80 93 a2 00 	sts	0x00A2, r24

					//pass 4 digt
					// if usr enter 4 numer will check
					if(i==4)
					{
						for(u8 m=0;m<4;m++)
    2a64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	8f 87       	std	Y+15, r24	; 0x0f
    2a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6c:	84 30       	cpi	r24, 0x04	; 4
    2a6e:	28 f3       	brcs	.-54     	; 0x2a3a <main+0x158>
								val++ ;
							}

						}
						// if val =4 that mean all pass right
						if(val==4)
    2a70:	80 91 a2 00 	lds	r24, 0x00A2
    2a74:	84 30       	cpi	r24, 0x04	; 4
    2a76:	61 f4       	brne	.+24     	; 0x2a90 <main+0x1ae>
						{
							H_LCD_void_GoToRowCol (1,5);
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	65 e0       	ldi	r22, 0x05	; 5
    2a7c:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
							H_LCD_void_DispChar('C'); // C mean correct
    2a80:	83 e4       	ldi	r24, 0x43	; 67
    2a82:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
							H_voidServoMove(2300); //open door .... servo motor
    2a86:	8c ef       	ldi	r24, 0xFC	; 252
    2a88:	98 e0       	ldi	r25, 0x08	; 8
    2a8a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <H_voidServoMove>
    2a8e:	83 c0       	rjmp	.+262    	; 0x2b96 <main+0x2b4>
						}
						// if val !=  4 that mean  pass wrong

						else {
							M_DIO_void_SetPinVal (PORTD_ID, PIN7_ID,PIN_HIGH_ID); // open buz
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	67 e0       	ldi	r22, 0x07	; 7
    2a94:	41 e0       	ldi	r20, 0x01	; 1
    2a96:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
							H_LCD_void_GoToRowCol (1,5);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	65 e0       	ldi	r22, 0x05	; 5
    2a9e:	0e 94 4a 11 	call	0x2294	; 0x2294 <H_LCD_void_GoToRowCol>
							H_LCD_void_DispChar('E'); // E mean Error
    2aa2:	85 e4       	ldi	r24, 0x45	; 69
    2aa4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <H_LCD_void_DispChar>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	aa ef       	ldi	r26, 0xFA	; 250
    2aae:	b4 e4       	ldi	r27, 0x44	; 68
    2ab0:	8b 87       	std	Y+11, r24	; 0x0b
    2ab2:	9c 87       	std	Y+12, r25	; 0x0c
    2ab4:	ad 87       	std	Y+13, r26	; 0x0d
    2ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	8f 83       	std	Y+7, r24	; 0x07
    2ad2:	98 87       	std	Y+8, r25	; 0x08
    2ad4:	a9 87       	std	Y+9, r26	; 0x09
    2ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <main+0x218>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <main+0x296>
	else if (__tmp > 65535)
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <main+0x278>
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <main+0x266>
    2b4c:	9c 83       	std	Y+4, r25	; 0x04
    2b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <main+0x25a>
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	6f 81       	ldd	r22, Y+7	; 0x07
    2b66:	78 85       	ldd	r23, Y+8	; 0x08
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <main+0x2a2>
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(2000); // wait 2 sec
							M_DIO_void_SetPinVal (PORTD_ID, PIN7_ID,PIN_LOW_ID);  // close buz
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	67 e0       	ldi	r22, 0x07	; 7
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <M_DIO_void_SetPinVal>
						}
						val=0;
    2b96:	10 92 a2 00 	sts	0x00A2, r1
				H_LCD_void_DispStr((u8*)"Enter Pass");

				//dispaly the next to scnd row
				H_LCD_void_GoToRowCol (1,0);

				while(i<=4)   //will loop until user enter 4 num
    2b9a:	80 91 9c 00 	lds	r24, 0x009C
    2b9e:	90 91 9d 00 	lds	r25, 0x009D
    2ba2:	85 30       	cpi	r24, 0x05	; 5
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	08 f4       	brcc	.+2      	; 0x2baa <main+0x2c8>
    2ba8:	1e cf       	rjmp	.-452    	; 0x29e6 <main+0x104>
    2baa:	c6 ce       	rjmp	.-628    	; 0x2938 <main+0x56>

00002bac <H_voidServoMove>:
#include "servo.h"


u16 ADC_Value ;
void H_voidServoMove(u16 copy_u16_servo)
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <H_voidServoMove+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01

	OCR1A=copy_u16_servo;
    2bba:	ea e4       	ldi	r30, 0x4A	; 74
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
	OCR1B=copy_u16_servo;
    2bc6:	e8 e4       	ldi	r30, 0x48	; 72
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24

}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <H_voidInitServo>:

void H_voidInitServo(void)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62

	TCCR1A|=(1<<1)|(1<<7) ;
    2be4:	af e4       	ldi	r26, 0x4F	; 79
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	ef e4       	ldi	r30, 0x4F	; 79
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	82 68       	ori	r24, 0x82	; 130
    2bf0:	8c 93       	st	X, r24
	TCCR1B|=(1<<1)|(1<<3)|(1<<4) ;
    2bf2:	ae e4       	ldi	r26, 0x4E	; 78
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ee e4       	ldi	r30, 0x4E	; 78
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	8a 61       	ori	r24, 0x1A	; 26
    2bfe:	8c 93       	st	X, r24
	ICR1=19999 ;
    2c00:	e6 e4       	ldi	r30, 0x46	; 70
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	8f e1       	ldi	r24, 0x1F	; 31
    2c06:	9e e4       	ldi	r25, 0x4E	; 78
    2c08:	91 83       	std	Z+1, r25	; 0x01
    2c0a:	80 83       	st	Z, r24
}
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <__mulsi3>:
    2c12:	62 9f       	mul	r22, r18
    2c14:	d0 01       	movw	r26, r0
    2c16:	73 9f       	mul	r23, r19
    2c18:	f0 01       	movw	r30, r0
    2c1a:	82 9f       	mul	r24, r18
    2c1c:	e0 0d       	add	r30, r0
    2c1e:	f1 1d       	adc	r31, r1
    2c20:	64 9f       	mul	r22, r20
    2c22:	e0 0d       	add	r30, r0
    2c24:	f1 1d       	adc	r31, r1
    2c26:	92 9f       	mul	r25, r18
    2c28:	f0 0d       	add	r31, r0
    2c2a:	83 9f       	mul	r24, r19
    2c2c:	f0 0d       	add	r31, r0
    2c2e:	74 9f       	mul	r23, r20
    2c30:	f0 0d       	add	r31, r0
    2c32:	65 9f       	mul	r22, r21
    2c34:	f0 0d       	add	r31, r0
    2c36:	99 27       	eor	r25, r25
    2c38:	72 9f       	mul	r23, r18
    2c3a:	b0 0d       	add	r27, r0
    2c3c:	e1 1d       	adc	r30, r1
    2c3e:	f9 1f       	adc	r31, r25
    2c40:	63 9f       	mul	r22, r19
    2c42:	b0 0d       	add	r27, r0
    2c44:	e1 1d       	adc	r30, r1
    2c46:	f9 1f       	adc	r31, r25
    2c48:	bd 01       	movw	r22, r26
    2c4a:	cf 01       	movw	r24, r30
    2c4c:	11 24       	eor	r1, r1
    2c4e:	08 95       	ret

00002c50 <__udivmodhi4>:
    2c50:	aa 1b       	sub	r26, r26
    2c52:	bb 1b       	sub	r27, r27
    2c54:	51 e1       	ldi	r21, 0x11	; 17
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <__udivmodhi4_ep>

00002c58 <__udivmodhi4_loop>:
    2c58:	aa 1f       	adc	r26, r26
    2c5a:	bb 1f       	adc	r27, r27
    2c5c:	a6 17       	cp	r26, r22
    2c5e:	b7 07       	cpc	r27, r23
    2c60:	10 f0       	brcs	.+4      	; 0x2c66 <__udivmodhi4_ep>
    2c62:	a6 1b       	sub	r26, r22
    2c64:	b7 0b       	sbc	r27, r23

00002c66 <__udivmodhi4_ep>:
    2c66:	88 1f       	adc	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	5a 95       	dec	r21
    2c6c:	a9 f7       	brne	.-22     	; 0x2c58 <__udivmodhi4_loop>
    2c6e:	80 95       	com	r24
    2c70:	90 95       	com	r25
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	08 95       	ret

00002c78 <__udivmodsi4>:
    2c78:	a1 e2       	ldi	r26, 0x21	; 33
    2c7a:	1a 2e       	mov	r1, r26
    2c7c:	aa 1b       	sub	r26, r26
    2c7e:	bb 1b       	sub	r27, r27
    2c80:	fd 01       	movw	r30, r26
    2c82:	0d c0       	rjmp	.+26     	; 0x2c9e <__udivmodsi4_ep>

00002c84 <__udivmodsi4_loop>:
    2c84:	aa 1f       	adc	r26, r26
    2c86:	bb 1f       	adc	r27, r27
    2c88:	ee 1f       	adc	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	a2 17       	cp	r26, r18
    2c8e:	b3 07       	cpc	r27, r19
    2c90:	e4 07       	cpc	r30, r20
    2c92:	f5 07       	cpc	r31, r21
    2c94:	20 f0       	brcs	.+8      	; 0x2c9e <__udivmodsi4_ep>
    2c96:	a2 1b       	sub	r26, r18
    2c98:	b3 0b       	sbc	r27, r19
    2c9a:	e4 0b       	sbc	r30, r20
    2c9c:	f5 0b       	sbc	r31, r21

00002c9e <__udivmodsi4_ep>:
    2c9e:	66 1f       	adc	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	1a 94       	dec	r1
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <__udivmodsi4_loop>
    2caa:	60 95       	com	r22
    2cac:	70 95       	com	r23
    2cae:	80 95       	com	r24
    2cb0:	90 95       	com	r25
    2cb2:	9b 01       	movw	r18, r22
    2cb4:	ac 01       	movw	r20, r24
    2cb6:	bd 01       	movw	r22, r26
    2cb8:	cf 01       	movw	r24, r30
    2cba:	08 95       	ret

00002cbc <__prologue_saves__>:
    2cbc:	2f 92       	push	r2
    2cbe:	3f 92       	push	r3
    2cc0:	4f 92       	push	r4
    2cc2:	5f 92       	push	r5
    2cc4:	6f 92       	push	r6
    2cc6:	7f 92       	push	r7
    2cc8:	8f 92       	push	r8
    2cca:	9f 92       	push	r9
    2ccc:	af 92       	push	r10
    2cce:	bf 92       	push	r11
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	ca 1b       	sub	r28, r26
    2ce6:	db 0b       	sbc	r29, r27
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	09 94       	ijmp

00002cf4 <__epilogue_restores__>:
    2cf4:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf6:	39 88       	ldd	r3, Y+17	; 0x11
    2cf8:	48 88       	ldd	r4, Y+16	; 0x10
    2cfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d06:	b9 84       	ldd	r11, Y+9	; 0x09
    2d08:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0a:	df 80       	ldd	r13, Y+7	; 0x07
    2d0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d10:	0c 81       	ldd	r16, Y+4	; 0x04
    2d12:	1b 81       	ldd	r17, Y+3	; 0x03
    2d14:	aa 81       	ldd	r26, Y+2	; 0x02
    2d16:	b9 81       	ldd	r27, Y+1	; 0x01
    2d18:	ce 0f       	add	r28, r30
    2d1a:	d1 1d       	adc	r29, r1
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	ed 01       	movw	r28, r26
    2d28:	08 95       	ret

00002d2a <ltoa>:
    2d2a:	fa 01       	movw	r30, r20
    2d2c:	cf 93       	push	r28
    2d2e:	ff 93       	push	r31
    2d30:	ef 93       	push	r30
    2d32:	22 30       	cpi	r18, 0x02	; 2
    2d34:	44 f1       	brlt	.+80     	; 0x2d86 <ltoa+0x5c>
    2d36:	25 32       	cpi	r18, 0x25	; 37
    2d38:	34 f5       	brge	.+76     	; 0x2d86 <ltoa+0x5c>
    2d3a:	c2 2f       	mov	r28, r18
    2d3c:	e8 94       	clt
    2d3e:	ca 30       	cpi	r28, 0x0A	; 10
    2d40:	49 f4       	brne	.+18     	; 0x2d54 <ltoa+0x2a>
    2d42:	97 fb       	bst	r25, 7
    2d44:	3e f4       	brtc	.+14     	; 0x2d54 <ltoa+0x2a>
    2d46:	90 95       	com	r25
    2d48:	80 95       	com	r24
    2d4a:	70 95       	com	r23
    2d4c:	61 95       	neg	r22
    2d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d50:	8f 4f       	sbci	r24, 0xFF	; 255
    2d52:	9f 4f       	sbci	r25, 0xFF	; 255
    2d54:	2c 2f       	mov	r18, r28
    2d56:	33 27       	eor	r19, r19
    2d58:	44 27       	eor	r20, r20
    2d5a:	55 27       	eor	r21, r21
    2d5c:	ff 93       	push	r31
    2d5e:	ef 93       	push	r30
    2d60:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__udivmodsi4>
    2d64:	ef 91       	pop	r30
    2d66:	ff 91       	pop	r31
    2d68:	60 5d       	subi	r22, 0xD0	; 208
    2d6a:	6a 33       	cpi	r22, 0x3A	; 58
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <ltoa+0x46>
    2d6e:	69 5d       	subi	r22, 0xD9	; 217
    2d70:	61 93       	st	Z+, r22
    2d72:	b9 01       	movw	r22, r18
    2d74:	ca 01       	movw	r24, r20
    2d76:	60 50       	subi	r22, 0x00	; 0
    2d78:	70 40       	sbci	r23, 0x00	; 0
    2d7a:	80 40       	sbci	r24, 0x00	; 0
    2d7c:	90 40       	sbci	r25, 0x00	; 0
    2d7e:	51 f7       	brne	.-44     	; 0x2d54 <ltoa+0x2a>
    2d80:	16 f4       	brtc	.+4      	; 0x2d86 <ltoa+0x5c>
    2d82:	cd e2       	ldi	r28, 0x2D	; 45
    2d84:	c1 93       	st	Z+, r28
    2d86:	10 82       	st	Z, r1
    2d88:	8f 91       	pop	r24
    2d8a:	9f 91       	pop	r25
    2d8c:	cf 91       	pop	r28
    2d8e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <strrev>

00002d92 <strrev>:
    2d92:	dc 01       	movw	r26, r24
    2d94:	fc 01       	movw	r30, r24
    2d96:	67 2f       	mov	r22, r23
    2d98:	71 91       	ld	r23, Z+
    2d9a:	77 23       	and	r23, r23
    2d9c:	e1 f7       	brne	.-8      	; 0x2d96 <strrev+0x4>
    2d9e:	32 97       	sbiw	r30, 0x02	; 2
    2da0:	04 c0       	rjmp	.+8      	; 0x2daa <strrev+0x18>
    2da2:	7c 91       	ld	r23, X
    2da4:	6d 93       	st	X+, r22
    2da6:	70 83       	st	Z, r23
    2da8:	62 91       	ld	r22, -Z
    2daa:	ae 17       	cp	r26, r30
    2dac:	bf 07       	cpc	r27, r31
    2dae:	c8 f3       	brcs	.-14     	; 0x2da2 <strrev+0x10>
    2db0:	08 95       	ret

00002db2 <_exit>:
    2db2:	f8 94       	cli

00002db4 <__stop_program>:
    2db4:	ff cf       	rjmp	.-2      	; 0x2db4 <__stop_program>
